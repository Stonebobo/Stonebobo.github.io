<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Android开发 | 使用LitePal操作数据库</title>
    <url>/2021/04/23/Andorid%E5%BC%80%E5%8F%91--%E4%BD%BF%E7%94%A8LitePal%E6%93%8D%E4%BD%9C%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
    <content><![CDATA[<h2 id="Andorid开发-使用LitePal操作数据库"><a href="#Andorid开发-使用LitePal操作数据库" class="headerlink" title="Andorid开发 | 使用LitePal操作数据库"></a>Andorid开发 | 使用LitePal操作数据库</h2><blockquote>
<p>总结于 郭霖大神 《第一行代码》中LitePal章节</p>
</blockquote>
<h4 id="LitePal是什么？"><a href="#LitePal是什么？" class="headerlink" title="LitePal是什么？"></a>LitePal是什么？</h4><p><a href="https://github.com/guolindev/LitePal">LitePal</a> 是一个开源的Android数据库框架，采用对象关系映射（ORM）的模式，并将常用的数据库操作（CRUD）进行封装。</p>
<p>那么ORM又是什么？我们的编程语言是面向对象编程语言，使用的数据库是关系型数据库。那么将面向对象语言与面向关系的数据库之间建立一种映射关系，这就是对象关系映射</p>
<span id="more"></span>

<hr>
<h4 id="使用前配置"><a href="#使用前配置" class="headerlink" title="使用前配置"></a>使用前配置</h4><ol>
<li><p>创建assets目录，将工程目录切换到 Project下，app-src-main-右击 新建一个assets目录，在assets目录下 新建一个litepal.xml文件 编辑litepal.xml中的内容</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">litepal</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--    数据库名--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dbname</span> <span class="attr">value</span>=<span class="string">&quot;Bookstore&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">dbname</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--    数据库版本号--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span> <span class="attr">value</span>=<span class="string">&quot;2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--    表对应的表名--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapping</span> <span class="attr">class</span>=<span class="string">&quot;com.littlestone.litepalpractice.Book&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapping</span> <span class="attr">class</span>=<span class="string">&quot;com.littlestone.litepalpractice.Category&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">litepal</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>修改项目的Application，（定死的，一定要这么写）</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">android:name=&quot;org.litepal.LitePalApplication&quot;</span><br></pre></td></tr></table></figure></li>
</ol>
<hr>
<h4 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h4><ol>
<li><p>定义一个Book类，采用JavaBean 表述，这里继承自DataSupport，是为了在增加数据的时候使用的，如果只是创建数据库，可以不用继承</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Book</span> <span class="keyword">extends</span> <span class="title">DataSupport</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String author;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> price;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> pages;</span><br><span class="line">    <span class="keyword">private</span> String name;<span class="comment">//书名</span></span><br><span class="line">    <span class="keyword">private</span> String press;<span class="comment">//出版商</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Book</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Book</span><span class="params">(<span class="keyword">int</span> id, String author, <span class="keyword">double</span> price, <span class="keyword">int</span> pages, String name, String press)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">        <span class="keyword">this</span>.author = author;</span><br><span class="line">        <span class="keyword">this</span>.price = price;</span><br><span class="line">        <span class="keyword">this</span>.pages = pages;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.press = press;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getAuthor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> author;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAuthor</span><span class="params">(String author)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.author = author;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getPrice</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPrice</span><span class="params">(<span class="keyword">double</span> price)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.price = price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getPages</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> pages;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPages</span><span class="params">(<span class="keyword">int</span> pages)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.pages = pages;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPress</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> press;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPress</span><span class="params">(String press)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.press = press;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li>
<li><p>将类名<strong>（完整的包名）</strong>加入到litepal中的list 中</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mapping</span> <span class="attr">class</span>=<span class="string">&quot;com.littlestone.litepalpractice.Book&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>在MainActivity中，调用Connector.getDataBase()</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Connector.getDatabase();</span><br></pre></td></tr></table></figure></li>
</ol>
<hr>
<h4 id="增"><a href="#增" class="headerlink" title="增"></a>增</h4><ol>
<li><p>创建一个Book类对象</p>
</li>
<li><p>将Book类继承自DataSupport</p>
<p>同上</p>
</li>
<li><p>调用对象.save()</p>
</li>
<li><p>全部代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Book book = <span class="keyword">new</span> Book();</span><br><span class="line">book.setName(<span class="string">&quot;第一行代码&quot;</span>);</span><br><span class="line">book.setAuthor(<span class="string">&quot;白文磊&quot;</span>);</span><br><span class="line">book.setPages(<span class="number">454</span>);</span><br><span class="line">book.setPrice(<span class="number">16.96</span>);</span><br><span class="line">book.setPress(<span class="string">&quot;Unknow&quot;</span>);</span><br><span class="line">book.save();</span><br></pre></td></tr></table></figure></li>
</ol>
<hr>
<h4 id="删"><a href="#删" class="headerlink" title="删"></a>删</h4><ol>
<li><p>调用DataSupport,deleteAll (第一个参数：类名.class，第二个参数 where语句，第三个参数 第二个参数中占位符？对应的值)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">DataSupport.deleteAll(Book.class, <span class="string">&quot;price&lt;?&quot;</span>, <span class="string">&quot;20&quot;</span>);</span><br></pre></td></tr></table></figure></li>
</ol>
<hr>
<h4 id="改"><a href="#改" class="headerlink" title="改"></a>改</h4><ol>
<li><p>创建要修改后的数据 对象</p>
</li>
<li><p>调用对象.updateAll(第一个参数：where，第二个参数where中?占位符对应的)</p>
</li>
<li><p>全部代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Book book = <span class="keyword">new</span> Book();</span><br><span class="line">book.setPrice(<span class="number">100</span>);</span><br><span class="line">book.setPress(<span class="string">&quot;西北大学&quot;</span>);</span><br><span class="line">book.updateAll(<span class="string">&quot;name=? and author=?&quot;</span>, <span class="string">&quot;第一行代码&quot;</span>, <span class="string">&quot;白文磊&quot;</span>);</span><br></pre></td></tr></table></figure></li>
</ol>
<hr>
<h4 id="查"><a href="#查" class="headerlink" title="查"></a>查</h4><p>查找的API较多,返回的是List&lt;&gt;类型，就可以进行遍历了</p>
<ol>
<li><p>DataSupport.findAll(Book.class)</p>
</li>
<li><p>DataSupport.findFirst(Book.class)</p>
</li>
<li><p>DataSupport.findLast(Book.class)</p>
</li>
<li><p>DataSupport.select(“列名”).find(Book.class)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">DataSupport.select(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;author&quot;</span>).find(Book.class);</span><br></pre></td></tr></table></figure></li>
<li><p>DataSupport.where(第一个参数：”pages&gt;?”,占位符对应的值)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">DataSupport.where(<span class="string">&quot;pages&gt;?&quot;</span>,<span class="string">&quot;100&quot;</span>).find(Book.class);</span><br></pre></td></tr></table></figure></li>
<li><p>DataSupport.limit ().find() 查找前几行的数据</p>
</li>
</ol>
<hr>
]]></content>
      <categories>
        <category>面试</category>
      </categories>
      <tags>
        <tag>安卓开发</tag>
      </tags>
  </entry>
  <entry>
    <title>Android四大组件（二） | BroadcastReceiver</title>
    <url>/2021/04/20/Andorid%E5%9B%9B%E5%A4%A7%E7%BB%84%E4%BB%B6%EF%BC%88%E4%BA%8C%EF%BC%89--BroadcastReceiver/</url>
    <content><![CDATA[<h3 id="Andorid四大组件（二）-BroadcastReceiver"><a href="#Andorid四大组件（二）-BroadcastReceiver" class="headerlink" title="Andorid四大组件（二） | BroadcastReceiver"></a>Andorid四大组件（二） | BroadcastReceiver</h3><blockquote>
<p>广播接收器 不要在Onreceive中 添加过多的耗时逻辑，因为在广播接受器中不允许开启线程</p>
</blockquote>
 <span id="more"></span>

<h4 id="动态注册（接收广播）"><a href="#动态注册（接收广播）" class="headerlink" title="动态注册（接收广播）"></a>动态注册（接收广播）</h4><p><strong>动态接收广播不需要在AndroidManifest 声明</strong></p>
<ol>
<li><p>创建一个类 继承自 BroadcastReceiver 并重写 onReceive</p>
</li>
<li><p>实例化上面这个类</p>
</li>
<li><p>添加IntentFilter</p>
</li>
<li><p>注册广播</p>
<blockquote>
<p>注意：对于一些敏感的广播内容(网络状态等) 需要在在AndroidManifest 声明</p>
</blockquote>
</li>
<li><p>注销广播</p>
</li>
<li><p>完整代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> IntentFilter intentFilter;</span><br><span class="line">    NetworkReceiver receiver;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        <span class="comment">//***************2*******************</span></span><br><span class="line">        receiver = <span class="keyword">new</span> NetworkReceiver();</span><br><span class="line">         <span class="comment">//***************3*******************</span></span><br><span class="line">        intentFilter = <span class="keyword">new</span> IntentFilter();</span><br><span class="line">        intentFilter.addAction(<span class="string">&quot;android.net.conn.CONNECTIVITY_CHANGE&quot;</span>);</span><br><span class="line">         <span class="comment">//***************4*******************</span></span><br><span class="line">        registerReceiver(receiver, intentFilter);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onDestroy();</span><br><span class="line">         <span class="comment">//***************5*******************</span></span><br><span class="line">        unregisterReceiver(receiver);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">     <span class="comment">//***************1*******************</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">NetworkReceiver</span> <span class="keyword">extends</span> <span class="title">BroadcastReceiver</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onReceive</span><span class="params">(Context context, Intent intent)</span> </span>&#123;</span><br><span class="line">            ConnectivityManager manager = (ConnectivityManager) getSystemService(Context.CONNECTIVITY_SERVICE);</span><br><span class="line">            NetworkInfo networkInfo = manager.getActiveNetworkInfo();</span><br><span class="line">            <span class="keyword">if</span> (networkInfo != <span class="keyword">null</span> &amp;&amp; networkInfo.isAvailable()) &#123;</span><br><span class="line">                Toast.makeText(MainActivity.<span class="keyword">this</span>, <span class="string">&quot;已联网&quot;</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                Toast.makeText(MainActivity.<span class="keyword">this</span>, <span class="string">&quot;网络异常&quot;</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<hr>
<h4 id="静态注册（接收广播）"><a href="#静态注册（接收广播）" class="headerlink" title="静态注册（接收广播）"></a>静态注册（接收广播）</h4><p>模拟机不支持静态注册，动态注册只有在APP开启的时候才可以接收到广播，如果想不开启APP就收到广播 需要静态注册广播</p>
<p><strong>静态注册广播需要在AndroidManifest中声明，并且需要声明 itentfilter中的action</strong>，表明监听哪种广播</p>
<ol>
<li><p>创建一个类 继承自 BroadcastReceiver 重写 onreceive方法</p>
</li>
<li><p>在AndroidManifest中注册 上面这个广播</p>
</li>
<li><p>在注册中添加action，也就是想要监听的广播</p>
</li>
<li><p>添加一定的权限声明，根据不同的需求</p>
</li>
<li><p>全部代码（监听手机开机）</p>
<p>MyReceiver类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyReceiver</span> <span class="keyword">extends</span> <span class="title">BroadcastReceiver</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onReceive</span><span class="params">(Context context, Intent intent)</span> </span>&#123;</span><br><span class="line">        Toast.makeText(context, <span class="string">&quot;接受到广播&quot;</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>MainActivity类中 不需要修改</p>
<p>AndroidManifest 中注册 receiver,添加权限声明</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span><br><span class="line">&lt;manifest xmlns:android=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span><br><span class="line">    <span class="keyword">package</span>=<span class="string">&quot;com.littlestone.broadcastreceiver_static&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">    &lt;uses-permission android:name=<span class="string">&quot;android.permission.RECEIVE_BOOT_COMPLETED&quot;</span>/&gt;</span><br><span class="line"></span><br><span class="line">    &lt;application</span><br><span class="line">        android:allowBackup=<span class="string">&quot;true&quot;</span></span><br><span class="line">        android:icon=<span class="string">&quot;@mipmap/ic_launcher&quot;</span></span><br><span class="line">        android:label=<span class="string">&quot;@string/app_name&quot;</span></span><br><span class="line">        android:roundIcon=<span class="string">&quot;@mipmap/ic_launcher_round&quot;</span></span><br><span class="line">        android:supportsRtl=<span class="string">&quot;true&quot;</span></span><br><span class="line">        android:theme=<span class="string">&quot;@style/Theme.BroadcastReceiver_Static&quot;</span>&gt;</span><br><span class="line">        &lt;activity android:name=<span class="string">&quot;.MainActivity&quot;</span>&gt;</span><br><span class="line">            &lt;intent-filter&gt;</span><br><span class="line">                &lt;action android:name=<span class="string">&quot;android.intent.action.MAIN&quot;</span> /&gt;</span><br><span class="line"></span><br><span class="line">                &lt;category android:name=<span class="string">&quot;android.intent.category.LAUNCHER&quot;</span> /&gt;</span><br><span class="line">            &lt;/intent-filter&gt;</span><br><span class="line">        &lt;/activity&gt;</span><br><span class="line"></span><br><span class="line">        &lt;receiver</span><br><span class="line">            android:name=<span class="string">&quot;.MyReceiver&quot;</span></span><br><span class="line">            android:enabled=<span class="string">&quot;true&quot;</span></span><br><span class="line">            android:exported=<span class="string">&quot;true&quot;</span>&gt;</span><br><span class="line">            &lt;intent-filter&gt;</span><br><span class="line">                &lt;action android:name=<span class="string">&quot;android.intent.action.BOOT_COMPLETED&quot;</span>/&gt;</span><br><span class="line">            &lt;/intent-filter&gt;</span><br><span class="line">        &lt;/receiver&gt;</span><br><span class="line">    &lt;/application&gt;</span><br><span class="line"></span><br><span class="line">&lt;/manifest&gt;</span><br></pre></td></tr></table></figure></li>
</ol>
<hr>
<h4 id="发送标准广播"><a href="#发送标准广播" class="headerlink" title="发送标准广播"></a>发送标准广播</h4><blockquote>
<p>发送广播前，需要定义一个接收该广播的类MyReceiver，静态注册</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyReceiver</span> <span class="keyword">extends</span> <span class="title">BroadcastReceiver</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onReceive</span><span class="params">(Context context, Intent intent)</span> </span>&#123;</span><br><span class="line">        Toast.makeText(context, <span class="string">&quot;收到标准广播&quot;</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">        <span class="comment">//下边这个是有序广播中 拦截广播</span></span><br><span class="line">        abortBroadcast();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如何发送广播？</p>
<ol>
<li><p>将上面这个静态注册的广播在AnroidMnifest注册</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">manifest</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">package</span>=<span class="string">&quot;com.littlestone.broadcastreceiver_sendstandard&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    &lt;application</span><br><span class="line">        android:allowBackup=&quot;true&quot;</span><br><span class="line">        android:icon=&quot;@mipmap/ic_launcher&quot;</span><br><span class="line">        android:label=&quot;@string/app_name&quot;</span><br><span class="line">        android:roundIcon=&quot;@mipmap/ic_launcher_round&quot;</span><br><span class="line">        android:supportsRtl=&quot;true&quot;</span><br><span class="line">        android:theme=&quot;@style/Theme.BroadcastReceiver_sendStandard&quot;&gt;</span><br><span class="line">        <span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:name</span>=<span class="string">&quot;.MainActivity&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">&quot;android.intent.action.MAIN&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">&quot;android.intent.category.LAUNCHER&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">activity</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        &lt;receiver</span><br><span class="line">            android:name=&quot;.MySecondReceiver&quot;</span><br><span class="line">            android:enabled=&quot;true&quot;</span><br><span class="line">            android:exported=&quot;true&quot;&gt;</span><br><span class="line">            <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">&quot;com.littlestone.broadcast.mine&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">receiver</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        &lt;receiver</span><br><span class="line">            android:name=&quot;.MyReceiver&quot;</span><br><span class="line">            android:enabled=&quot;true&quot;</span><br><span class="line">            android:exported=&quot;true&quot;&gt;</span><br><span class="line">            <span class="tag">&lt;<span class="name">intent-filter</span> <span class="attr">android:priority</span>=<span class="string">&quot;100&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">&quot;com.littlestone.broadcast.mine&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">receiver</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">application</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">manifest</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>定义一个要发送的广播的Intent</p>
</li>
<li><p>发送广播（sendBroadcast（intent））</p>
</li>
<li><p>全部代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Button btn_standard, btn_order;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        btn_standard = findViewById(R.id.btn_standard);</span><br><span class="line">        btn_order = findViewById(R.id.btn_order);</span><br><span class="line"></span><br><span class="line">        btn_standard.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">                Intent intent = <span class="keyword">new</span> Intent(<span class="string">&quot;com.littlestone.broadcast.mine&quot;</span>);</span><br><span class="line">                <span class="comment">//标准广播</span></span><br><span class="line">                sendBroadcast(intent);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        btn_order.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">                Intent intent = <span class="keyword">new</span> Intent(<span class="string">&quot;com.littlestone.broadcast.mine&quot;</span>);</span><br><span class="line">                <span class="comment">//有序广播 第二个参数为权限相关 设为null即可</span></span><br><span class="line">                sendOrderedBroadcast(intent, <span class="keyword">null</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h4 id="发送有序广播"><a href="#发送有序广播" class="headerlink" title="发送有序广播"></a>发送有序广播</h4><blockquote>
<p>发送有序广播与标准广播大体上类似，只不过是sendorderBroadcast(intent)</p>
</blockquote>
<p>既然是有序广播，就可以定义广播接收器的优先级，在intentfilter标签中 android:priority=”100” 就定义优先级的大小</p>
<p>代码将上述 第二个Button的点击事件处理，以及 AndroidMnifest中两个接收的注册声明</p>
<h4 id="发送本地广播"><a href="#发送本地广播" class="headerlink" title="发送本地广播"></a>发送本地广播</h4><p>发送本地广播需要在 build.gradle中添加依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">implementation &#x27;androidx.localbroadcastmanager:localbroadcastmanager:1.0.0&#x27;</span><br></pre></td></tr></table></figure>

<p>发送本地广播</p>
<ol>
<li><p>需要先实例化一个LocalBroadcastManager 通过LocalBroadcastManager.getInstance(Context context) 实例化</p>
</li>
<li><p>发送本地广播与 发送系统广播没有大的差别 只不过需要通过上面的manager来发送 而不是 Context类中来发送</p>
</li>
</ol>
<p>接收本地广播</p>
<p>接收本地广播 采用动态注册的方式 进行接收广播，为什么采用动态注册 而不是静态，静态注册APP不启动时也可以收到广播，但是我们接受的是本地广播，本来就需要我们APP在启动的状态下发送，静态注册就没有意义了</p>
<ol>
<li><p>实例化一个IntentFilter</p>
</li>
<li><p>为IntentFilter添加action 也就是监听什么广播</p>
</li>
<li><p>使用localBroadCastManager.registerReceiver（intentfilter）来注册广播</p>
</li>
<li><p>使用localBroadCastManager.unregisterReceiver（intentfilter）来注销广播</p>
</li>
</ol>
<p>全部代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> IntentFilter filter;</span><br><span class="line">    <span class="keyword">private</span> LocalBroadcastReceiver localBroadcastReceiver;</span><br><span class="line">    <span class="keyword">private</span> LocalBroadcastManager localBroadcastManager;</span><br><span class="line">    <span class="keyword">private</span> Button button;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//发送本地广播</span></span><br><span class="line">        button = findViewById(R.id.button);</span><br><span class="line">        button.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">                Intent intent = <span class="keyword">new</span> Intent(<span class="string">&quot;com.littlestone.localbroadcast&quot;</span>);</span><br><span class="line">                localBroadcastManager.sendBroadcast(intent);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//接收本地广播相关代码 动态注册接收广播</span></span><br><span class="line">        filter = <span class="keyword">new</span> IntentFilter();</span><br><span class="line">        filter.addAction(<span class="string">&quot;com.littlestone.localbroadcast&quot;</span>);</span><br><span class="line">        localBroadcastReceiver = <span class="keyword">new</span> LocalBroadcastReceiver();</span><br><span class="line">        localBroadcastManager = LocalBroadcastManager.getInstance(<span class="keyword">this</span>);</span><br><span class="line">        localBroadcastManager.registerReceiver(localBroadcastReceiver, filter);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onDestroy();</span><br><span class="line">        localBroadcastManager.unregisterReceiver(localBroadcastReceiver);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">LocalBroadcastReceiver</span> <span class="keyword">extends</span> <span class="title">BroadcastReceiver</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onReceive</span><span class="params">(Context context, Intent intent)</span> </span>&#123;</span><br><span class="line">            Toast.makeText(context, <span class="string">&quot;收到本地广播&quot;</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>安卓开发</category>
      </categories>
      <tags>
        <tag>安卓开发</tag>
      </tags>
  </entry>
  <entry>
    <title>再探 NavigationController ----页面传递数据更简单</title>
    <url>/2021/04/15/NavigationController%20%E5%86%8D%E6%8E%A2/</url>
    <content><![CDATA[<blockquote>
<p>在<a href="https://littlestone.space/2021/04/15/NavigationController%20%E5%88%9D%E6%8E%A2/#more">上一节</a>中，我们简单使用了 Jetpack中的 Navigation , NavGraph, NavHost，Fragment 来实现页面之间的切换，但并没有涉及到页面之间如何传递数据？本节讲述 如何通过 <strong>Bundle</strong> 在Fragement中 传递数据</p>
</blockquote>
<span id="more"></span>

<h4 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h4><img src="https://i.loli.net/2021/04/15/1nAaftOZuMVvsHF.gif" alt="4" style="zoom: 67%;">

<h4 id="实现步骤"><a href="#实现步骤" class="headerlink" title="实现步骤"></a>实现步骤</h4><h5 id="准备两个Fragment-界面-以及对应的类"><a href="#准备两个Fragment-界面-以及对应的类" class="headerlink" title="准备两个Fragment 界面 以及对应的类"></a>准备两个Fragment 界面 以及对应的类</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HomeFragment</span> <span class="keyword">extends</span> <span class="title">Fragment</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HomeFragment</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Required empty public constructor</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> View <span class="title">onCreateView</span><span class="params">(LayoutInflater inflater, ViewGroup container,</span></span></span><br><span class="line"><span class="function"><span class="params">                             Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Inflate the layout for this fragment</span></span><br><span class="line">        <span class="keyword">return</span> inflater.inflate(R.layout.fragment_home, container, <span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onActivityCreated</span><span class="params">(<span class="meta">@Nullable</span> Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onActivityCreated(savedInstanceState);</span><br><span class="line">        getView().findViewById(R.id.button).setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">                EditText editText = getView().findViewById(R.id.edit);</span><br><span class="line">                String string = editText.getText().toString().trim();</span><br><span class="line">                <span class="keyword">if</span> (TextUtils.isEmpty(string)) &#123;</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                NavController controller = Navigation.findNavController(v);</span><br><span class="line">                <span class="comment">//*******************和上一节的区别*********************</span></span><br><span class="line">                Bundle bundle = <span class="keyword">new</span> Bundle();</span><br><span class="line">                bundle.putString(<span class="string">&quot;my_name&quot;</span>, string);</span><br><span class="line">                <span class="comment">//*******************将Bundle 传递过去</span></span><br><span class="line">                controller.navigate(R.id.action_homeFragment_to_detailFragment, bundle);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DetailFragment</span> <span class="keyword">extends</span> <span class="title">Fragment</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DetailFragment</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Required empty public constructor</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> View <span class="title">onCreateView</span><span class="params">(LayoutInflater inflater, ViewGroup container,</span></span></span><br><span class="line"><span class="function"><span class="params">                             Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Inflate the layout for this fragment</span></span><br><span class="line">        <span class="keyword">return</span> inflater.inflate(R.layout.fragment_detail, container, <span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onActivityCreated</span><span class="params">(<span class="meta">@Nullable</span> Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onActivityCreated(savedInstanceState);</span><br><span class="line">        TextView textView = getView().findViewById(R.id.textView);</span><br><span class="line">        <span class="comment">//*****************取数据*********************</span></span><br><span class="line">        String name = getArguments().getString(<span class="string">&quot;my_name&quot;</span>, <span class="string">&quot;default_name&quot;</span>);</span><br><span class="line">        textView.setText(name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="准备NavGraph"><a href="#准备NavGraph" class="headerlink" title="准备NavGraph"></a>准备NavGraph</h5><p>右击<code>res</code>–<code>New</code>–Android Resource File ，在Resource Type中 选择 Navigation </p>
<h5 id="准备NavHost"><a href="#准备NavHost" class="headerlink" title="准备NavHost"></a>准备NavHost</h5><p>在Activity _main 中 放置一个，NavHostFragement</p>
<h5 id="编写Fragment中-点击事件"><a href="#编写Fragment中-点击事件" class="headerlink" title="编写Fragment中 点击事件"></a>编写Fragment中 点击事件</h5><p>详见 上述代码</p>
<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>主要记住 以下代码</p>
<h5 id="传值-："><a href="#传值-：" class="headerlink" title="传值 ："></a>传值 ：</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">NavController controller = Navigation.findNavController(v);</span><br><span class="line">Bundle bundle = <span class="keyword">new</span> Bundle();</span><br><span class="line">bundle.putString(<span class="string">&quot;my_name&quot;</span>, string);</span><br><span class="line">controller.navigate(R.id.action_homeFragment_to_detailFragment, bundle);</span><br></pre></td></tr></table></figure>

<h5 id="取值"><a href="#取值" class="headerlink" title="取值"></a>取值</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String name = getArguments().getString(<span class="string">&quot;my_name&quot;</span>, <span class="string">&quot;default_name&quot;</span>);</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>安卓开发</category>
      </categories>
      <tags>
        <tag>安卓开发</tag>
        <tag>JetPack</tag>
      </tags>
  </entry>
  <entry>
    <title>终探 NavigationController ----页面共享数据更简单</title>
    <url>/2021/04/15/NavigationController%20%E7%BB%88%E6%8E%A2/</url>
    <content><![CDATA[<blockquote>
<p>在 <a href="https://littlestone.space/2021/04/15/NavigationController%20%E5%86%8D%E6%8E%A2/">再探 NavigationController —-页面传递数据更简单</a>中，我们通过使用Bundle来传递数据，在本节 我们将总结 多个Fragment 如何共享数据，其实就是ViewModel 与 Fragment的结合</p>
</blockquote>
<span id="more"></span>

<h4 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h4><img src="https://i.loli.net/2021/04/15/qE3cJyRDCLrO8nY.gif" alt="5" style="zoom:67%;">

<h4 id="分析上述效果图"><a href="#分析上述效果图" class="headerlink" title="分析上述效果图"></a>分析上述效果图</h4><p>我们需要将界面一的值 传到界面二，界面二对值进行+1 或者 -1 将更新后的值 传回 界面一，我们可以通过上一节讲的Buddle 来进行传递数据，也可以通过我们之前所讲的ViewModel 来存放这个数据，<strong>这时候就不是界面之间传值，而是两个界面对一个数据的共同访问</strong>，</p>
<p>我们之间学到的Viewmodel，dataBingding都是在Activity中实例化，在Fragment中实例化 又有所不同，见本文最后 总结部分</p>
<h4 id="实现步骤"><a href="#实现步骤" class="headerlink" title="实现步骤"></a>实现步骤</h4><h5 id="1-实现MyViewModel类"><a href="#1-实现MyViewModel类" class="headerlink" title="1. 实现MyViewModel类"></a>1. 实现MyViewModel类</h5><p>这里和普通的ViewModel使用没有差别</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyViewModel</span> <span class="keyword">extends</span> <span class="title">ViewModel</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> MutableLiveData&lt;Integer&gt; number;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MutableLiveData&lt;Integer&gt; <span class="title">getNumber</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (number == <span class="keyword">null</span>) &#123;</span><br><span class="line">            number = <span class="keyword">new</span> MutableLiveData&lt;&gt;();</span><br><span class="line">            number.setValue(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> number;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        number.setValue(number.getValue() + x);</span><br><span class="line">        <span class="keyword">if</span> (number.getValue() &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            number.setValue(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="2-编写两个Fragment-布局-以及-对应的类"><a href="#2-编写两个Fragment-布局-以及-对应的类" class="headerlink" title="2. 编写两个Fragment 布局 以及 对应的类"></a>2. 编写两个Fragment 布局 以及 对应的类</h5><p>布局资源</p>
<p>FragmentHome xml</p>
<p>要注意 TextView 中的Text  需要String类型 </p>
<img src="/2021/04/15/NavigationController%20%E7%BB%88%E6%8E%A2/Users/LittleStone/AppData/Roaming/Typora/typora-user-images/image-20210415213840554.png" alt="image-20210415213840554" style="zoom:50%;">

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">layout</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:app</span>=<span class="string">&quot;http://schemas.android.com/apk/res-auto&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:tools</span>=<span class="string">&quot;http://schemas.android.com/tools&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">data</span>&gt;</span></span><br><span class="line">        &lt;variable</span><br><span class="line">            name=&quot;data&quot;</span><br><span class="line">            type=&quot;com.littlestone.navigationpractice3.MyViewModel&quot; /&gt;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">data</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    &lt;androidx.constraintlayout.widget.ConstraintLayout</span><br><span class="line">        android:layout_width=&quot;match_parent&quot;</span><br><span class="line">        android:layout_height=&quot;match_parent&quot;</span><br><span class="line">        tools:context=&quot;.HomeFragment&quot;&gt;</span><br><span class="line"></span><br><span class="line">        &lt;TextView</span><br><span class="line">            android:id=&quot;@+id/textView&quot;</span><br><span class="line">            android:layout_width=&quot;wrap_content&quot;</span><br><span class="line">            android:layout_height=&quot;wrap_content&quot;</span><br><span class="line">            注意这里 需要将Int转String</span><br><span class="line">            android:text=&quot;@&#123;String.valueOf(data.number)&#125;&quot;</span><br><span class="line">            android:textSize=&quot;30sp&quot;</span><br><span class="line">            app:layout_constraintBottom_toBottomOf=&quot;parent&quot;</span><br><span class="line">            app:layout_constraintEnd_toEndOf=&quot;parent&quot;</span><br><span class="line">            app:layout_constraintHorizontal_bias=&quot;0.526&quot;</span><br><span class="line">            app:layout_constraintStart_toStartOf=&quot;parent&quot;</span><br><span class="line">            app:layout_constraintTop_toTopOf=&quot;parent&quot;</span><br><span class="line">            app:layout_constraintVertical_bias=&quot;0.154&quot; /&gt;</span><br><span class="line"></span><br><span class="line">        &lt;SeekBar</span><br><span class="line">            android:id=&quot;@+id/seekBar&quot;</span><br><span class="line">            android:layout_width=&quot;0dp&quot;</span><br><span class="line">            android:layout_height=&quot;wrap_content&quot;</span><br><span class="line">            android:max=&quot;10&quot;</span><br><span class="line">            app:layout_constraintBottom_toBottomOf=&quot;parent&quot;</span><br><span class="line">            app:layout_constraintEnd_toEndOf=&quot;parent&quot;</span><br><span class="line">            app:layout_constraintHorizontal_bias=&quot;0.502&quot;</span><br><span class="line">            app:layout_constraintStart_toStartOf=&quot;parent&quot;</span><br><span class="line">            app:layout_constraintTop_toTopOf=&quot;parent&quot;</span><br><span class="line">            app:layout_constraintVertical_bias=&quot;0.308&quot; /&gt;</span><br><span class="line"></span><br><span class="line">        &lt;Button</span><br><span class="line">            android:id=&quot;@+id/button&quot;</span><br><span class="line">            android:layout_width=&quot;wrap_content&quot;</span><br><span class="line">            android:layout_height=&quot;wrap_content&quot;</span><br><span class="line">            android:text=&quot;Button&quot;</span><br><span class="line">            这里并没有 执行Viewmodel中的方法，是因为 这个按钮并不与值相关，只是切换界面的</span><br><span class="line">            app:layout_constraintBottom_toBottomOf=&quot;parent&quot;</span><br><span class="line">            app:layout_constraintEnd_toEndOf=&quot;parent&quot;</span><br><span class="line">            app:layout_constraintStart_toStartOf=&quot;parent&quot;</span><br><span class="line">            app:layout_constraintTop_toTopOf=&quot;parent&quot;</span><br><span class="line">            app:layout_constraintVertical_bias=&quot;0.443&quot; /&gt;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">androidx.constraintlayout.widget.ConstraintLayout</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">layout</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>FragmentHome.java</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HomeFragment</span> <span class="keyword">extends</span> <span class="title">Fragment</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> MyViewModel myViewModel;</span><br><span class="line">    <span class="keyword">private</span> FragmentHomeBinding binding;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HomeFragment</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Required empty public constructor</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> View <span class="title">onCreateView</span><span class="params">(LayoutInflater inflater, ViewGroup container,</span></span></span><br><span class="line"><span class="function"><span class="params">                             Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">		</span><br><span class="line">        <span class="comment">//*******************************注意***************************************</span></span><br><span class="line">        myViewModel = <span class="keyword">new</span> ViewModelProvider(getActivity()).get(MyViewModel.class);</span><br><span class="line">        binding = DataBindingUtil.inflate(inflater, R.layout.fragment_home, container, <span class="keyword">false</span>);</span><br><span class="line">        <span class="comment">//*******************************注意***************************************</span></span><br><span class="line"></span><br><span class="line">        binding.setData(myViewModel);</span><br><span class="line">        binding.setLifecycleOwner(getActivity());</span><br><span class="line"></span><br><span class="line">        binding.seekBar.setProgress(myViewModel.getNumber().getValue());</span><br><span class="line">        binding.seekBar.setOnSeekBarChangeListener(<span class="keyword">new</span> SeekBar.OnSeekBarChangeListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onProgressChanged</span><span class="params">(SeekBar seekBar, <span class="keyword">int</span> progress, <span class="keyword">boolean</span> fromUser)</span> </span>&#123;</span><br><span class="line">                <span class="comment">//</span></span><br><span class="line">                myViewModel.getNumber().setValue(progress);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onStartTrackingTouch</span><span class="params">(SeekBar seekBar)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onStopTrackingTouch</span><span class="params">(SeekBar seekBar)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        binding.button.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">                NavController controller = Navigation.findNavController(v);</span><br><span class="line">                controller.navigate(R.id.action_homeFragment_to_detailFragment);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">return</span> binding.getRoot();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>第二个界面</p>
<img src="https://i.loli.net/2021/04/15/m6MoXQTBHZFqPSa.png" alt="image-20210415220209499" style="zoom:50%;">

<p>这里有两个对数据进行更新的Button，所以这两个Button需要执行Viewmodel中的add函数，另一个Button事件由Fragment负责</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">layout</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:app</span>=<span class="string">&quot;http://schemas.android.com/apk/res-auto&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:tools</span>=<span class="string">&quot;http://schemas.android.com/tools&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">data</span>&gt;</span></span><br><span class="line">        &lt;variable</span><br><span class="line">            name=&quot;data&quot;</span><br><span class="line">            type=&quot;com.littlestone.navigationpractice3.MyViewModel&quot; /&gt;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">data</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    &lt;androidx.constraintlayout.widget.ConstraintLayout</span><br><span class="line">        android:layout_width=&quot;match_parent&quot;</span><br><span class="line">        android:layout_height=&quot;match_parent&quot;</span><br><span class="line">        tools:context=&quot;.DetailFragment&quot;&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &lt;TextView</span><br><span class="line">            android:id=&quot;@+id/textView2&quot;</span><br><span class="line">            android:layout_width=&quot;wrap_content&quot;</span><br><span class="line">            android:layout_height=&quot;wrap_content&quot;</span><br><span class="line">            android:text=&quot;@&#123;String.valueOf(data.number)&#125;&quot;</span><br><span class="line">            android:textSize=&quot;36sp&quot;</span><br><span class="line">            app:layout_constraintBottom_toBottomOf=&quot;parent&quot;</span><br><span class="line">            app:layout_constraintEnd_toEndOf=&quot;parent&quot;</span><br><span class="line">            app:layout_constraintHorizontal_bias=&quot;0.498&quot;</span><br><span class="line">            app:layout_constraintStart_toStartOf=&quot;parent&quot;</span><br><span class="line">            app:layout_constraintTop_toTopOf=&quot;parent&quot;</span><br><span class="line">            app:layout_constraintVertical_bias=&quot;0.243&quot; /&gt;</span><br><span class="line"></span><br><span class="line">        &lt;Button</span><br><span class="line">            android:id=&quot;@+id/button2&quot;</span><br><span class="line">            android:layout_width=&quot;wrap_content&quot;</span><br><span class="line">            android:layout_height=&quot;wrap_content&quot;</span><br><span class="line">            android:text=&quot;+1&quot;</span><br><span class="line">                 ********************************注意******************************</span><br><span class="line">            android:onClick=&quot;@&#123;()-&gt;data.add(1)&#125;&quot;</span><br><span class="line">            android:textSize=&quot;18sp&quot;</span><br><span class="line">            app:layout_constraintBottom_toBottomOf=&quot;parent&quot;</span><br><span class="line">            app:layout_constraintEnd_toEndOf=&quot;parent&quot;</span><br><span class="line">            app:layout_constraintHorizontal_bias=&quot;0.27&quot;</span><br><span class="line">            app:layout_constraintStart_toStartOf=&quot;parent&quot;</span><br><span class="line">            app:layout_constraintTop_toTopOf=&quot;parent&quot;</span><br><span class="line">            app:layout_constraintVertical_bias=&quot;0.43&quot; /&gt;</span><br><span class="line"></span><br><span class="line">        &lt;Button</span><br><span class="line">            android:id=&quot;@+id/button3&quot;</span><br><span class="line">            android:layout_width=&quot;wrap_content&quot;</span><br><span class="line">            android:layout_height=&quot;wrap_content&quot;</span><br><span class="line">            android:text=&quot;-1&quot;</span><br><span class="line">                ********************************注意******************************</span><br><span class="line">            android:onClick=&quot;@&#123;()-&gt;data.add(-1)&#125;&quot;</span><br><span class="line">            android:textSize=&quot;18sp&quot;</span><br><span class="line">            app:layout_constraintBottom_toBottomOf=&quot;parent&quot;</span><br><span class="line">            app:layout_constraintEnd_toEndOf=&quot;parent&quot;</span><br><span class="line">            app:layout_constraintHorizontal_bias=&quot;0.738&quot;</span><br><span class="line">            app:layout_constraintStart_toStartOf=&quot;parent&quot;</span><br><span class="line">            app:layout_constraintTop_toTopOf=&quot;parent&quot;</span><br><span class="line">            app:layout_constraintVertical_bias=&quot;0.43&quot; /&gt;</span><br><span class="line"></span><br><span class="line">        &lt;Button</span><br><span class="line">            android:id=&quot;@+id/button4&quot;</span><br><span class="line">            android:layout_width=&quot;wrap_content&quot;</span><br><span class="line">            android:layout_height=&quot;wrap_content&quot;</span><br><span class="line">            android:text=&quot;返回&quot;</span><br><span class="line">            app:layout_constraintBottom_toBottomOf=&quot;parent&quot;</span><br><span class="line">            app:layout_constraintEnd_toEndOf=&quot;parent&quot;</span><br><span class="line">            app:layout_constraintStart_toStartOf=&quot;parent&quot;</span><br><span class="line">            app:layout_constraintTop_toTopOf=&quot;parent&quot;</span><br><span class="line">            app:layout_constraintVertical_bias=&quot;0.579&quot; /&gt;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">androidx.constraintlayout.widget.ConstraintLayout</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">layout</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="3-创建DataBinding-，并修改Fragment-布局-文件"><a href="#3-创建DataBinding-，并修改Fragment-布局-文件" class="headerlink" title="3. 创建DataBinding ，并修改Fragment 布局 文件"></a>3. 创建DataBinding ，并修改Fragment 布局 文件</h5><p>代码 见上</p>
<h5 id="4-创建NavGraph"><a href="#4-创建NavGraph" class="headerlink" title="4. 创建NavGraph"></a>4. 创建NavGraph</h5><p>右击<code>res</code>–<code>New</code>–Android Resource File ，在Resource Type中 选择 Navigation </p>
<img src="https://i.loli.net/2021/04/15/YJiSOMDZ9V8vU1T.png" alt="image-20210415220745535" style="zoom:50%;">

<h5 id="5-在Activity-main-layout中-添加-NavHostFragment"><a href="#5-在Activity-main-layout中-添加-NavHostFragment" class="headerlink" title="5.在Activity main layout中 添加 NavHostFragment"></a>5.在Activity main layout中 添加 NavHostFragment</h5><p><img src="https://i.loli.net/2021/04/15/Awh1lBMDma3o7OU.png" alt="image-20210415220847775"></p>
<h5 id="6-在Fragment类中-实例化MyViewModel类-，与-DataBinding类"><a href="#6-在Fragment类中-实例化MyViewModel类-，与-DataBinding类" class="headerlink" title="6.在Fragment类中 实例化MyViewModel类 ，与 DataBinding类"></a>6.在Fragment类中 实例化MyViewModel类 ，与 DataBinding类</h5><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><h5 id="1-不论是在Activity，还是Fragment-对于ViewModel的初始化是大部分一样的，"><a href="#1-不论是在Activity，还是Fragment-对于ViewModel的初始化是大部分一样的，" class="headerlink" title="1.不论是在Activity，还是Fragment ,对于ViewModel的初始化是大部分一样的，"></a>1.不论是在Activity，还是Fragment ,对于ViewModel的初始化是大部分一样的，</h5><p>有一点需要注意 就是ViewModelProvider 中的参数 Fragment是getActivity(),而 Activity直接就是this</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">myViewModel = <span class="keyword">new</span> ViewModelProvider(<span class="keyword">this</span>).get(MyViewModel.class);</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">myViewModel = <span class="keyword">new</span> ViewModelProvider(getActivity()).get(MyViewModel.class);</span><br></pre></td></tr></table></figure>

<h5 id="2-对于Databinding的初始化-是不一样的"><a href="#2-对于Databinding的初始化-是不一样的" class="headerlink" title="2. 对于Databinding的初始化 是不一样的"></a>2. 对于Databinding的初始化 是不一样的</h5><p>对于Activity：在Oncreate中写</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">binding = DataBindingUtil.setContentView(<span class="keyword">this</span>,R.layout.activity_main);</span><br><span class="line">binding.setData(myViewModel);</span><br><span class="line">binding.setLifecycleOwner(<span class="keyword">this</span>);</span><br></pre></td></tr></table></figure>

<p>对于Fragment ，在OncreateView中写</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">binding = DataBindingUtil.inflate(inflater, R.layout.fragment_home, container, <span class="keyword">false</span>);</span><br><span class="line">binding.setData(myViewModel);</span><br><span class="line">binding.setLifecycleOwner(getActivity());</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>安卓开发</category>
      </categories>
      <tags>
        <tag>安卓开发</tag>
        <tag>JetPack</tag>
      </tags>
  </entry>
  <entry>
    <title>初探 NavigationController ----页面切换更简单</title>
    <url>/2021/04/15/NavigationController%20%E5%88%9D%E6%8E%A2/</url>
    <content><![CDATA[<blockquote>
<p>本节 我总结了 Jetpack中的Navigation组件的简单实用方法 ， <a href="https://www.bilibili.com/video/BV1w4411t7UQ?p=17&spm_id_from=pageDriver">视频链接</a></p>
</blockquote>
<span id="more"></span>

<h4 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h4><img src="https://i.loli.net/2021/04/15/GOiSEj3NKh7rw8D.gif" alt="3" style="zoom:67%;">

<h4 id="所需要的类"><a href="#所需要的类" class="headerlink" title="所需要的类"></a>所需要的类</h4><p><img src="https://i.loli.net/2021/04/15/zdUF6frjvMSNTOZ.png" alt="Navigation"></p>
<h4 id="实现步骤"><a href="#实现步骤" class="headerlink" title="实现步骤"></a>实现步骤</h4><h5 id="准备Fragment-类-以及对应的XML布局文件"><a href="#准备Fragment-类-以及对应的XML布局文件" class="headerlink" title="准备Fragment 类 以及对应的XML布局文件"></a>准备Fragment 类 以及对应的XML布局文件</h5><p>这里与之前实现底部导航栏类似，不过我们将控件的绑定放到了 OnActivityCreate 中，</p>
<p>HomeFragement</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HomeFragment</span> <span class="keyword">extends</span> <span class="title">Fragment</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HomeFragment</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Required empty public constructor</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> View <span class="title">onCreateView</span><span class="params">(LayoutInflater inflater, ViewGroup container,</span></span></span><br><span class="line"><span class="function"><span class="params">                             Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Inflate the layout for this fragment</span></span><br><span class="line">        <span class="keyword">return</span> inflater.inflate(R.layout.fragment_home, container, <span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onActivityCreated</span><span class="params">(<span class="meta">@Nullable</span> Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onActivityCreated(savedInstanceState);</span><br><span class="line">        getView().findViewById(R.id.button).setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">                <span class="comment">//********************这里 进行页面切换 **************************</span></span><br><span class="line">                NavController controller = Navigation.findNavController(v);</span><br><span class="line">                <span class="comment">//这里的参数id 是 在编写完 NavGraph，后会自动生成</span></span><br><span class="line">                controller.navigate(R.id.action_homeFragment_to_detailFragment);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>DetailFragement</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DetailFragment</span> <span class="keyword">extends</span> <span class="title">Fragment</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DetailFragment</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Required empty public constructor</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> View <span class="title">onCreateView</span><span class="params">(LayoutInflater inflater, ViewGroup container,</span></span></span><br><span class="line"><span class="function"><span class="params">                             Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Inflate the layout for this fragment</span></span><br><span class="line">        <span class="keyword">return</span> inflater.inflate(R.layout.fragment_detail, container, <span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onActivityCreated</span><span class="params">(<span class="meta">@Nullable</span> Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onActivityCreated(savedInstanceState);</span><br><span class="line">        getView().findViewById(R.id.button2).setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">                 <span class="comment">//********************这里 进行页面切换 **************************</span></span><br><span class="line">                NavController controller = Navigation.findNavController(v);</span><br><span class="line">                controller.navigate(R.id.action_detailFragment_to_homeFragment);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="准备NavGraph"><a href="#准备NavGraph" class="headerlink" title="准备NavGraph"></a>准备NavGraph</h5><p>右击<code>res</code>–<code>New</code>–Android Resource File ，在Resource Type中 选择 Navigation </p>
<p><img src="https://i.loli.net/2021/04/15/zBMOg5ZYEeFAtTw.png" alt="image-20210415105019792"></p>
<h5 id="准备NavHost"><a href="#准备NavHost" class="headerlink" title="准备NavHost"></a>准备NavHost</h5><p>在Activity _main 中 放置一个，NavHostFragement</p>
<p><img src="https://i.loli.net/2021/04/15/X6WL8UQHdaheEpM.png" alt="image-20210415105116000"></p>
<h5 id="编写Fragment中-点击事件"><a href="#编写Fragment中-点击事件" class="headerlink" title="编写Fragment中 点击事件"></a>编写Fragment中 点击事件</h5><p>详见 上述代码</p>
<h5 id="编写顶部bar的返回事件，修改标题栏名称"><a href="#编写顶部bar的返回事件，修改标题栏名称" class="headerlink" title="编写顶部bar的返回事件，修改标题栏名称"></a>编写顶部bar的返回事件，修改标题栏名称</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        <span class="comment">//标题栏改为 fragment 名称</span></span><br><span class="line">        NavController controller = Navigation.findNavController(<span class="keyword">this</span>, R.id.navHost);</span><br><span class="line">        NavigationUI.setupActionBarWithNavController(<span class="keyword">this</span>, controller);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回按钮事件</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onSupportNavigateUp</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        NavController controller = Navigation.findNavController(<span class="keyword">this</span>, R.id.navHost);</span><br><span class="line">        <span class="keyword">return</span> controller.navigateUp();</span><br><span class="line"><span class="comment">//        return super.onSupportNavigateUp();</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><h5 id="1-NavController-的构造方法有两种"><a href="#1-NavController-的构造方法有两种" class="headerlink" title="1. NavController 的构造方法有两种"></a>1. NavController 的构造方法有两种</h5><p>第一种 只有一个参数 View，在Onclick方法中使用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">NavController controller = Navigation.findNavController(v);</span><br></pre></td></tr></table></figure>

<p>第二种  有两个参数 ，第一个是Activity 第二个是NavHost 的布局id</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">NavController controller = Navigation.findNavController(<span class="keyword">this</span>, R.id.navHost);</span><br></pre></td></tr></table></figure>

<h5 id="2-ToolBar-返回事件-的编写"><a href="#2-ToolBar-返回事件-的编写" class="headerlink" title="2. ToolBar 返回事件 的编写"></a>2. ToolBar 返回事件 的编写</h5><p>需要重写 onSupportNavigateUp() 回调函数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onSupportNavigateUp</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    NavController controller = Navigation.findNavController(<span class="keyword">this</span>, R.id.navHost);</span><br><span class="line">    <span class="keyword">return</span> controller.navigateUp();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="3-标题栏-改为-fragment的名称，在onCreate-方法中-加"><a href="#3-标题栏-改为-fragment的名称，在onCreate-方法中-加" class="headerlink" title="3. 标题栏 改为 fragment的名称，在onCreate 方法中 加"></a>3. 标题栏 改为 fragment的名称，在onCreate 方法中 加</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">NavController controller = Navigation.findNavController(<span class="keyword">this</span>, R.id.navHost);</span><br><span class="line">NavigationUI.setupActionBarWithNavController(<span class="keyword">this</span>, controller);</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>安卓开发</category>
      </categories>
      <tags>
        <tag>安卓开发</tag>
        <tag>JetPack</tag>
      </tags>
  </entry>
  <entry>
    <title>ViewModel、LivingData、SavedState、DataBinding</title>
    <url>/2021/04/13/JetPack%E4%B8%AD%E7%9A%84ViewModel_LiveDta_DataBinding/</url>
    <content><![CDATA[<p> 前言：</p>
<p>​      在界面放一个TextView 与 +1 的Button 和 -1 的Button</p>
<span id="more"></span>

<h4 id="ViewModel的使用"><a href="#ViewModel的使用" class="headerlink" title="ViewModel的使用"></a>ViewModel的使用</h4><p>​    <a href="https://www.bilibili.com/video/BV1w4411t7UQ?p=10">视频链接</a></p>
<ol>
<li><p>控件初始化</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> TextView textView;</span><br><span class="line"><span class="keyword">private</span> Button btn1, btn2;</span><br><span class="line"></span><br><span class="line">textView = findViewById(R.id.textView);</span><br><span class="line">btn1 = findViewById(R.id.button);</span><br><span class="line">btn2 = findViewById(R.id.button2);</span><br></pre></td></tr></table></figure></li>
<li><p>创建一个MyViewModel类 继承自ViewModel </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyViewModel</span> <span class="keyword">extends</span> <span class="title">ViewModel</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> number = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>在MainActivity 中 实例化这个MyViewModel类对象</p>
<p>这里要通过 ViewModelProdiver(owner:     ).get()方法实例化</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> MyViewModel myViewModel;</span><br><span class="line">myViewModel = <span class="keyword">new</span> ViewModelProvider(MainActivity.<span class="keyword">this</span>).get(MyViewModel.class);</span><br></pre></td></tr></table></figure></li>
<li><p>在Button的点击事件中 修改Model中的数据 ，再通知TextView修改文本</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">btn1.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">                myViewModel.number++;</span><br><span class="line">                textView.setText(String.valueOf(myViewModel.number));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        btn2.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">                myViewModel.number+=<span class="number">2</span>;</span><br><span class="line">                textView.setText(String.valueOf(myViewModel.number));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure>

<p>使用ViewModel的优点：</p>
<p>在旋转屏幕时，能够保存TextView中的数据，而不需要调用OnsaveInstance方法 来保存数据，简化代码</p>
</li>
</ol>
<hr>
<h4 id="LiveData的使用"><a href="#LiveData的使用" class="headerlink" title="LiveData的使用"></a>LiveData的使用</h4><p>​    <a href="https://www.bilibili.com/video/BV1w4411t7UQ?p=11">视频链接</a></p>
<ol>
<li><p>控件初始化</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> TextView number;</span><br><span class="line"><span class="keyword">private</span> Button add,sub;</span><br><span class="line">number = findViewById(R.id.number);</span><br><span class="line">add = findViewById(R.id.button_add);</span><br><span class="line">sub = findViewById(R.id.button_sub);</span><br></pre></td></tr></table></figure></li>
<li><p>创建一个MyViewModel 类 继承自 ViewModel 并且 里面存放的是  LiveData 类型的对象 ，这种数据类型，可以让我们在Avtivity中设置一个监听者，当这个对象值发生改变时，自动将数据传到View</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ViewModelWithLiveData</span> <span class="keyword">extends</span> <span class="title">ViewModel</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> MutableLiveData&lt;Integer&gt; LikedNumber;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MutableLiveData&lt;Integer&gt; <span class="title">getLikedNumber</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(LikedNumber==<span class="keyword">null</span>)&#123;</span><br><span class="line">            LikedNumber = <span class="keyword">new</span> MutableLiveData&lt;&gt;();</span><br><span class="line">            LikedNumber.setValue(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> LikedNumber;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addLiked</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">        LikedNumber.setValue(LikedNumber.getValue() + n);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>在MainActivity 中 实例化这个MyViewModel类对象，并对 这个对象所保存的数据 进行监听（观察）</p>
<p>这里要通过 ViewModelProdiver(owner:     ).get()方法实例化 同上</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">viewModelWithLiveData = <span class="keyword">new</span> ViewModelProvider(MainActivity.<span class="keyword">this</span>).get(ViewModelWithLiveData.class);</span><br><span class="line"><span class="comment">//***********************监听数据变化</span></span><br><span class="line">viewModelWithLiveData.getLikedNumber().observe(<span class="keyword">this</span>, <span class="keyword">new</span> Observer&lt;Integer&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onChanged</span><span class="params">(Integer integer)</span> </span>&#123;</span><br><span class="line">        number.setText(String.valueOf(integer));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li>
<li><p>对Button的事件 进行处理，通过调用Model中的add方法 修改LiveData数据 就会触发监听器</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">add.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">        viewModelWithLiveData.addLiked(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">sub.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">        viewModelWithLiveData.addLiked(-<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<hr>
</li>
</ol>
<h4 id="DataBinding的使用"><a href="#DataBinding的使用" class="headerlink" title="DataBinding的使用"></a>DataBinding的使用</h4><p>​    <a href="https://www.bilibili.com/video/BV1w4411t7UQ?p=12">视频链接</a></p>
<ol>
<li><p>修改build.gradle(model:app)，支持dataBinding</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    defaultConfig &#123;</span><br><span class="line">        applicationId <span class="string">&quot;com.littlestone.databindingpractice&quot;</span></span><br><span class="line">        minSdkVersion <span class="number">16</span></span><br><span class="line">        targetSdkVersion <span class="number">30</span></span><br><span class="line">        versionCode <span class="number">1</span></span><br><span class="line">        versionName <span class="string">&quot;1.0&quot;</span></span><br><span class="line"></span><br><span class="line">        testInstrumentationRunner <span class="string">&quot;androidx.test.runner.AndroidJUnitRunner&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//      加入 dataBinding 的使用</span></span><br><span class="line">        dataBinding&#123;</span><br><span class="line">            enabled <span class="keyword">true</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li>
<li><p>创建一个MyViewModel 类 继承自 ViewModel 并且 里面存放的是  LiveData 类型的对象，编写 get函数 以及 add函数</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyViewModel</span> <span class="keyword">extends</span> <span class="title">ViewModel</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> MutableLiveData&lt;Integer&gt; LiveNumber;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MutableLiveData&lt;Integer&gt; <span class="title">getLiveNumber</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(LiveNumber==<span class="keyword">null</span>)&#123;</span><br><span class="line">            LiveNumber = <span class="keyword">new</span> MutableLiveData&lt;&gt;();</span><br><span class="line">            LiveNumber.setValue(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> LiveNumber;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addOne</span><span class="params">()</span></span>&#123;</span><br><span class="line">        LiveNumber.setValue(LiveNumber.getValue()+<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>在MainActivity中 创建一个MyViewModel 类对象 并初始化</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> ActivityMainBinding binding;</span><br><span class="line"><span class="comment">//实例化 mviewModel</span></span><br><span class="line">myViewModel = <span class="keyword">new</span> ViewModelProvider(<span class="keyword">this</span>).get(MyViewModel.class);</span><br></pre></td></tr></table></figure></li>
<li><p>将布局文件 修改为 Databinding类型 ，这里不需要手动修改，将光标移动到布局文件的根布局下，弹出小灯泡  点击提示 create databinding layout，系统就会创建一个对应这个布局的类 ActivityMainBinding，类名前半部分就是布局名</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">layout</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:app</span>=<span class="string">&quot;http://schemas.android.com/apk/res-auto&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:tools</span>=<span class="string">&quot;http://schemas.android.com/tools&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--关键--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">data</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">    <span class="tag">&lt;/<span class="name">data</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    &lt;androidx.constraintlayout.widget.ConstraintLayout</span><br><span class="line">        android:layout_width=&quot;match_parent&quot;</span><br><span class="line">        android:layout_height=&quot;match_parent&quot;</span><br><span class="line">        tools:context=&quot;.MainActivity&quot;&gt;</span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--text的引用方式--&gt;</span></span><br><span class="line">        &lt;TextView</span><br><span class="line">            android:id=&quot;@+id/textView&quot;</span><br><span class="line">            android:layout_width=&quot;wrap_content&quot;</span><br><span class="line">            android:layout_height=&quot;wrap_content&quot;</span><br><span class="line">            android:text=&quot;@&#123;String.valueOf(data.LiveNumber)&#125;&quot;</span><br><span class="line">            android:textSize=&quot;24sp&quot;</span><br><span class="line">            app:layout_constraintBottom_toBottomOf=&quot;parent&quot;</span><br><span class="line">            app:layout_constraintHorizontal_bias=&quot;0.498&quot;</span><br><span class="line">            app:layout_constraintLeft_toLeftOf=&quot;parent&quot;</span><br><span class="line">            app:layout_constraintRight_toRightOf=&quot;parent&quot;</span><br><span class="line">            app:layout_constraintTop_toTopOf=&quot;parent&quot;</span><br><span class="line">            app:layout_constraintVertical_bias=&quot;0.206&quot; /&gt;</span><br><span class="line">        <span class="comment">&lt;!--Button的点击事件--&gt;</span></span><br><span class="line">        &lt;Button</span><br><span class="line">            android:id=&quot;@+id/button&quot;</span><br><span class="line">            android:layout_width=&quot;wrap_content&quot;</span><br><span class="line">            android:layout_height=&quot;wrap_content&quot;</span><br><span class="line">            android:text=&quot;+1&quot;</span><br><span class="line">            android:onClick=&quot;@&#123;()-&gt;data.addOne()&#125;&quot;</span><br><span class="line">            app:layout_constraintBottom_toBottomOf=&quot;parent&quot;</span><br><span class="line">            app:layout_constraintEnd_toEndOf=&quot;parent&quot;</span><br><span class="line">            app:layout_constraintStart_toStartOf=&quot;parent&quot;</span><br><span class="line">            app:layout_constraintTop_toTopOf=&quot;parent&quot; /&gt;</span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">androidx.constraintlayout.widget.ConstraintLayout</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">layout</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>在布局文件中 <data></data>标签下 添加一个 变量 </p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--关键--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">data</span>&gt;</span></span><br><span class="line">    &lt;variable</span><br><span class="line">        name=&quot;data&quot;</span><br><span class="line">        type=&quot;com.littlestone.databindingpractice.MyViewModel&quot; /&gt;</span><br><span class="line"><span class="tag">&lt;/<span class="name">data</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>修改Text的 text 展示方式</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">android:text=&quot;@&#123;String.valueOf(data.LiveNumber)&#125;&quot;</span><br></pre></td></tr></table></figure></li>
<li><p>修改Button的点击触发事件</p>
</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">注意 引用方式 先写@｛｝，在｛｝中 添加()-&gt; 变量名.方法</span><br><span class="line">android:onClick=&quot;@&#123;()-&gt;data.addOne()&#125;&quot;</span><br></pre></td></tr></table></figure>

<ol start="8">
<li><p>在MainActivity中 初始化 ActivityMainBinding，给XML 中的data传一个对象，声明所属</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> ActivityMainBinding binding;</span><br><span class="line">    <span class="keyword">private</span> MyViewModel myViewModel;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//实例化 mviewModel</span></span><br><span class="line">        myViewModel = <span class="keyword">new</span> ViewModelProvider(<span class="keyword">this</span>).get(MyViewModel.class);</span><br><span class="line">        <span class="comment">//初始化 binding</span></span><br><span class="line">        binding = DataBindingUtil.setContentView(<span class="keyword">this</span>,R.layout.activity_main);</span><br><span class="line">        <span class="comment">//给XML 中的data传一个对象过去</span></span><br><span class="line">        binding.setData(myViewModel);</span><br><span class="line">        <span class="comment">//声明所属</span></span><br><span class="line">        binding.setLifecycleOwner(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h4 id="数据持久化存储"><a href="#数据持久化存储" class="headerlink" title="数据持久化存储"></a>数据持久化存储</h4><ol>
<li><p>使用<code>OnSaveInstanceState()</code>方法，该方法会在Activity被destroy前被调用，<code>OnSaveInstanceState()</code>方法携带了一个Bundle 类型的参数 Bundle参数提供了一系列的方法用于保存数据（key,value），在Oncreate 方法中，如果之前调用了<code>OnSaveInstanceState()</code>,参数就不为空了,就可以通过</p>
</li>
<li><p>使用<code>SharedPreferences</code> ，使用editor 存数据，注意editor，使用SharedPreferences读数据</p>
</li>
<li><p>在ViewModel中使用 <code>SavedStateHandle</code>, 这个参数有 set方法 handle.set(key,value), handle.getLiveData(key)</p>
<p>添加依赖</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">implementation <span class="string">&quot;androidx.lifecycle:lifecycle-viewmodel-savedstate:2.3.0&quot;</span></span><br></pre></td></tr></table></figure>

<p>ViewModel 代码</p>
<p>需要注意 Viewmodel的构造方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">   <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyViewModel</span> <span class="keyword">extends</span> <span class="title">ViewModel</span> </span>&#123;</span><br><span class="line">       <span class="keyword">private</span> SavedStateHandle handle;</span><br><span class="line">   </span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="title">MyViewModel</span><span class="params">(SavedStateHandle handle)</span> </span>&#123;</span><br><span class="line">           <span class="keyword">this</span>.handle = handle;</span><br><span class="line">       &#125;</span><br><span class="line">   </span><br><span class="line">       <span class="function"><span class="keyword">public</span> MutableLiveData&lt;Integer&gt; <span class="title">getNumber</span><span class="params">()</span></span>&#123;</span><br><span class="line">           <span class="keyword">if</span>(handle.contains(MainActivity.NUMBER_VAL)==<span class="keyword">false</span>)&#123;</span><br><span class="line">               handle.set(MainActivity.NUMBER_VAL,<span class="number">0</span>);</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">return</span> handle.getLiveData(MainActivity.NUMBER_VAL);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addOne</span><span class="params">()</span></span>&#123;</span><br><span class="line">        getNumber().setValue(getNumber().getValue()+<span class="number">1</span>);</span><br><span class="line">       &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Activity 代码</p>
<p>注意实例化ViewModel 时的代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">   <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line">       <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> String NUMBER_VAL=<span class="string">&quot;NUMBER&quot;</span>;</span><br><span class="line">       <span class="keyword">private</span> MyViewModel myViewModel;</span><br><span class="line">       <span class="keyword">private</span> ActivityMainBinding binding;</span><br><span class="line">       <span class="keyword">private</span> MyApplication myApplication;</span><br><span class="line">   </span><br><span class="line">       <span class="meta">@Override</span></span><br><span class="line">       <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">           <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">           binding = DataBindingUtil.setContentView(<span class="keyword">this</span>,R.layout.activity_main);</span><br><span class="line">           <span class="comment">//*******************注意***********************</span></span><br><span class="line">           <span class="comment">//需要我们定义一个Application类 ViewModel的构造方法需要</span></span><br><span class="line">           myViewModel = <span class="keyword">new</span> ViewModelProvider(<span class="keyword">this</span>,<span class="keyword">new</span> SavedStateViewModelFactory(myApplication,<span class="keyword">this</span>)).get(MyViewModel.class);</span><br><span class="line">           binding.setData(myViewModel);</span><br><span class="line">        binding.setLifecycleOwner(<span class="keyword">this</span>);</span><br><span class="line">       &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Application 代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyApplication</span> <span class="keyword">extends</span> <span class="title">Application</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Context context;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate();</span><br><span class="line">        context = getApplicationContext();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Context <span class="title">getContext</span><span class="params">()</span></span>&#123;</span><br><span class="line">     <span class="keyword">return</span> context;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>安卓开发</category>
      </categories>
      <tags>
        <tag>安卓开发</tag>
        <tag>JetPack</tag>
      </tags>
  </entry>
  <entry>
    <title>Android四大组件（一） | Activity</title>
    <url>/2021/04/12/Andorid%E5%9B%9B%E5%A4%A7%E7%BB%84%E4%BB%B6%EF%BC%88%E4%B8%80%EF%BC%89--Activity/</url>
    <content><![CDATA[<h2 id="Andorid四大组件（一）-Activity"><a href="#Andorid四大组件（一）-Activity" class="headerlink" title="Andorid四大组件（一） | Activity"></a>Andorid四大组件（一） | Activity</h2> <span id="more"></span>

<h4 id="使用Intent在活动之间穿梭"><a href="#使用Intent在活动之间穿梭" class="headerlink" title="使用Intent在活动之间穿梭"></a>使用Intent在活动之间穿梭</h4><h5 id="显式Intent"><a href="#显式Intent" class="headerlink" title="显式Intent"></a>显式Intent</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Itent intent = <span class="keyword">new</span> (Context context , SecondActivity.class);</span><br><span class="line">startActivity(intent);</span><br></pre></td></tr></table></figure>

<p>第一个参数为 上下文，第二个参数为 想要启动的Activity 类名</p>
<h5 id="隐式Intent"><a href="#隐式Intent" class="headerlink" title="隐式Intent"></a>隐式Intent</h5><p>相比较于显式Intent ，隐式Intent要更加含蓄，不明确启动哪一个活动，而是我们指定一些抽象的 action 和 category ，由用户去选择去调用哪一种Activity,下面这个代码 并没有指明响应哪一个 category 就说明 启动默认的category</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Intent intent = <span class="keyword">new</span> Intent(<span class="string">&quot;com.littlestone.activitylifecircle.ACTION_START&quot;</span>);</span><br><span class="line">startActivity(intent);</span><br></pre></td></tr></table></figure>

<p>如果想要添加 自定义的category</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">intent.addCategory(<span class="string">&quot;com.littlestone.activitylifecircle.MY_CATEGORY&quot;</span>);</span><br></pre></td></tr></table></figure>



<hr>
<h4 id="活动的生命周期"><a href="#活动的生命周期" class="headerlink" title="活动的生命周期"></a>活动的生命周期</h4><p>包括了：</p>
<ol>
<li><p>oncreate()</p>
</li>
<li><p>onstart()</p>
</li>
<li><p>onresume()</p>
</li>
<li><p>onpause()</p>
</li>
<li><p>onstop()</p>
</li>
<li><p>ondestroy()</p>
</li>
</ol>
<p>如图：</p>
<img src="https://i.loli.net/2021/04/12/NbsUPtOQXr671RS.png" alt="image-20210412200521693" style="zoom: 67%;">

<p>需要注意的是，屏幕发生翻转会经过以下生命周期(相当于重走了一遍 生命周期)</p>
<p>一开始进入的时候：</p>
<ol>
<li>Oncreate</li>
<li>onstart</li>
<li>onresume<br>屏幕翻转</li>
<li>onpause</li>
<li>onstop</li>
<li>ondestroy</li>
<li>oncreate</li>
<li>onstart</li>
<li>onresume</li>
</ol>
<p>禁止屏幕反转<br>在 AndoridManifest 的 Activity 中 设置   android:screenOrientation=”portrait”</p>
<ol>
<li>portrait : 竖直模式</li>
<li>landscape: 水平模式</li>
</ol>
<hr>
<h4 id="活动的启动模式"><a href="#活动的启动模式" class="headerlink" title="活动的启动模式"></a>活动的启动模式</h4><p>需要再 AndroidManifest 的activity标签中 声明 launchMode</p>
<ol>
<li><p>standard</p>
<p>standard 是活动的默认启动模型，在不显性的指定的情况下，都是这种模式。stacndard 模式中，不管返回栈中是否存在该Activity，都会创建这个Activity 并将其加入到返回栈中</p>
<p><img src="https://i.loli.net/2021/04/20/NUcOCkHZGMfp2FI.png" alt="image-20210420152258189"></p>
</li>
<li><p>singleTop</p>
<p>singletop是standard的改进版本，会判断栈顶是否为要启动的活动，</p>
<ul>
<li>如果是就不创建新的活动了，直接使用。</li>
<li>如果栈顶不是要启动的活动，还需要再创建并加入到返回栈中</li>
</ul>
</li>
<li><p>singleTask</p>
<p>singleTask是singletop的改进版本，会判断栈内是否存在要启动的活动</p>
<ul>
<li><p>如果存在，需要将该活动之间的活动 弹出栈，然后直接使用</p>
</li>
<li><p>如果不存在，再创建，并加入到返回栈中</p>
<p><img src="https://i.loli.net/2021/04/20/yp4B9iGIZV1laKr.png" alt="image-20210420153032013"></p>
</li>
</ul>
</li>
<li><p>singleInStance</p>
<p>是Activity 启动模式中最难理解的一种，会将该Activity放置到一个新的返回栈中，以便其他APP调用</p>
<p><img src="https://i.loli.net/2021/04/20/XSohuAsT976azkP.png" alt="image-20210420153710778"></p>
</li>
</ol>
<hr>
<h4 id="活动的最佳实践"><a href="#活动的最佳实践" class="headerlink" title="活动的最佳实践"></a>活动的最佳实践</h4><hr>
]]></content>
      <categories>
        <category>安卓开发</category>
      </categories>
      <tags>
        <tag>安卓开发</tag>
      </tags>
  </entry>
  <entry>
    <title>你真的懂 Python3的除法么？</title>
    <url>/2021/04/01/%E4%BD%A0%E7%9C%9F%E7%9A%84%E6%87%82-Python3%E7%9A%84%E9%99%A4%E6%B3%95%E4%B9%88%EF%BC%9F/</url>
    <content><![CDATA[<h2 id="你真的了解Python3中的除法么？"><a href="#你真的了解Python3中的除法么？" class="headerlink" title="你真的了解Python3中的除法么？"></a>你真的了解Python3中的除法么？</h2><h4 id="小测验"><a href="#小测验" class="headerlink" title="小测验"></a>小测验</h4><span id="more"></span>

<p>你能准确算出 以下的答案么？</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    print(<span class="string">&quot;#&quot;</span> * <span class="number">10</span> + <span class="string">&quot; / &quot;</span> + <span class="string">&quot;#&quot;</span> * <span class="number">10</span>)</span><br><span class="line">    print(<span class="string">&quot;5/3=&quot;</span>, <span class="number">5</span> / <span class="number">3</span>)</span><br><span class="line">    print(<span class="string">&quot;-5/-3=&quot;</span>, - <span class="number">5</span> / -<span class="number">3</span>)</span><br><span class="line">    print(<span class="string">&quot;-5/3=&quot;</span>, -<span class="number">5</span> / <span class="number">3</span>)</span><br><span class="line">    print(<span class="string">&quot;5/-3=&quot;</span>, <span class="number">5</span> / -<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">    print(<span class="string">&quot;#&quot;</span> * <span class="number">10</span> + <span class="string">&quot; // &quot;</span> + <span class="string">&quot;#&quot;</span> * <span class="number">10</span>)</span><br><span class="line">    print(<span class="string">&quot;5//3=&quot;</span>, <span class="number">5</span> // <span class="number">3</span>)</span><br><span class="line">    print(<span class="string">&quot;-5//-3=&quot;</span>, - <span class="number">5</span> // -<span class="number">3</span>)</span><br><span class="line">    print(<span class="string">&quot;-5//3=&quot;</span>, -<span class="number">5</span> // <span class="number">3</span>)</span><br><span class="line">    print(<span class="string">&quot;5//-3=&quot;</span>, <span class="number">5</span> // -<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">    print(<span class="string">&quot;#&quot;</span> * <span class="number">10</span> + <span class="string">&quot; % &quot;</span> + <span class="string">&quot;#&quot;</span> * <span class="number">10</span>)</span><br><span class="line">    print(<span class="string">&quot;5%3=&quot;</span>, <span class="number">5</span> % <span class="number">3</span>)</span><br><span class="line">    print(<span class="string">&quot;-5%-3=&quot;</span>, - <span class="number">5</span> % -<span class="number">3</span>)</span><br><span class="line">    print(<span class="string">&quot;-5%3=&quot;</span>, -<span class="number">5</span> % <span class="number">3</span>)</span><br><span class="line">    print(<span class="string">&quot;5%-3=&quot;</span>, <span class="number">5</span> % -<span class="number">3</span>)</span><br></pre></td></tr></table></figure>
<p>答案：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">########## / ##########</span></span><br><span class="line"><span class="number">5</span>/<span class="number">3</span>= <span class="number">1.6666666666666667</span></span><br><span class="line">-<span class="number">5</span>/-<span class="number">3</span>= <span class="number">1.6666666666666667</span></span><br><span class="line">-<span class="number">5</span>/<span class="number">3</span>= -<span class="number">1.6666666666666667</span></span><br><span class="line"><span class="number">5</span>/-<span class="number">3</span>= -<span class="number">1.6666666666666667</span></span><br><span class="line"><span class="comment">########## // ##########</span></span><br><span class="line"><span class="number">5</span>//<span class="number">3</span>= <span class="number">1</span></span><br><span class="line">-<span class="number">5</span>//-<span class="number">3</span>= <span class="number">1</span></span><br><span class="line">-<span class="number">5</span>//<span class="number">3</span>= -<span class="number">2</span></span><br><span class="line"><span class="number">5</span>//-<span class="number">3</span>= -<span class="number">2</span></span><br><span class="line"><span class="comment">########## % ##########</span></span><br><span class="line"><span class="number">5</span>%<span class="number">3</span>= <span class="number">2</span></span><br><span class="line">-<span class="number">5</span>%-<span class="number">3</span>= -<span class="number">2</span></span><br><span class="line">-<span class="number">5</span>%<span class="number">3</span>= <span class="number">1</span></span><br><span class="line"><span class="number">5</span>%-<span class="number">3</span>= -<span class="number">1</span></span><br></pre></td></tr></table></figure>



<hr>
<h4 id="除法中的取整运算"><a href="#除法中的取整运算" class="headerlink" title="除法中的取整运算"></a>除法中的取整运算</h4><ol>
<li><p>向上取整</p>
<p>向<code>+∞</code>方向取最接近精确值的整数。在这种取整方式下，5 / 3 = 2， -5 / -3 = 2， -5 / 3 = -1， 5 / -3 = -1 </p>
</li>
<li><p>向下取整</p>
<p>向<code>-∞</code>方向取最接近精确值的整数。在这种取整方式下，5 / 3 = 1， -5 / -3 = 1， -5 / 3 = -2， 5 / -3 = -2 </p>
</li>
<li><p><strong>向0取整</strong></p>
<p>向0方向取最接近精确值的整数，<strong>换言之就是舍去小数部分</strong>，因此又称截断取整。在这种取整方式下，5 / 3 = 1， -5 / -3 = 1， -5 / 3 = -1， 5 / -3 = -1</p>
</li>
</ol>
<p>我们所接触过的C，C++，JAVA 语言取整方式都是向0取整的，而<strong>Python是向下取整</strong>的 </p>
<hr>
<h4 id="取模运算"><a href="#取模运算" class="headerlink" title="取模运算"></a>取模运算</h4><p>如果 a/b = q, a%b = r （可表示为a/b=q … r）</p>
<blockquote>
<p> 在python中，遇到取模运算时，可以先用向下取整的方式算出q，然后结合下面的公式算出r。</p>
</blockquote>
<p>那么 a = b*q + r</p>
<p>#当a小于b时(a&gt;0, b&gt;0)，r = a，因为这时q = 0</p>
<blockquote>
<p> 在C语言中，%符号表示的是求余运算。根据C语言中除法结果向零取整的规则，5 % 3 = 2， -5 % -3 = -2， -5 % 3 = -2， 5 % -3 = 2</p>
</blockquote>
<p>所以我们对比以下两个表格 ：</p>
<p>C语言 JAVA语言 C++下</p>
<table>
<thead>
<tr>
<th align="center">a</th>
<th align="center">b</th>
<th align="center">q</th>
<th align="center">r</th>
</tr>
</thead>
<tbody><tr>
<td align="center">5</td>
<td align="center">3</td>
<td align="center">1</td>
<td align="center">2</td>
</tr>
<tr>
<td align="center">-5</td>
<td align="center">-3</td>
<td align="center">1</td>
<td align="center">-2</td>
</tr>
<tr>
<td align="center">-5</td>
<td align="center">3</td>
<td align="center">-1</td>
<td align="center">-2</td>
</tr>
<tr>
<td align="center">5</td>
<td align="center">-3</td>
<td align="center">-1</td>
<td align="center">2</td>
</tr>
</tbody></table>
<p>Python 语言下</p>
<table>
<thead>
<tr>
<th align="center">a</th>
<th align="center">b</th>
<th align="center">q</th>
<th align="center">r</th>
</tr>
</thead>
<tbody><tr>
<td align="center">5</td>
<td align="center">3</td>
<td align="center">1</td>
<td align="center">2</td>
</tr>
<tr>
<td align="center">-5</td>
<td align="center">-3</td>
<td align="center">1</td>
<td align="center">-2</td>
</tr>
<tr>
<td align="center"><strong>-5</strong></td>
<td align="center"><strong>3</strong></td>
<td align="center"><strong>-2</strong></td>
<td align="center"><strong>1</strong></td>
</tr>
<tr>
<td align="center"><strong>5</strong></td>
<td align="center"><strong>-3</strong></td>
<td align="center"><strong>-2</strong></td>
<td align="center"><strong>-1</strong></td>
</tr>
</tbody></table>
<p><strong>注意：最下面两个表格最后两行是不一样的</strong></p>
<p>为什么？</p>
<p>由于 Python采用的是 <strong>向下取整</strong> 的方法， 并且 要保证 <code>a = b*q + r</code>这个公式的有效性，就会导致 余数不同</p>
<p>我们还会发现，Pyhton中，余数与除数的是同正或者同负的</p>
<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><ol>
<li>Python 中<code>//</code> 是向下取整的 就回到导致   -3//2  = -2  而不是-1</li>
<li>Python的 <code>%</code> 运算 由于其向下取整的特性 导致 与C，C++,JAVA 语言 答案不一样</li>
</ol>
]]></content>
      <categories>
        <category>面试</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>java易错点</title>
    <url>/2021/03/26/java%E6%98%93%E9%94%99%E7%82%B9/</url>
    <content><![CDATA[<h2 id="在-JAVA-语言中容易被忽略的问题"><a href="#在-JAVA-语言中容易被忽略的问题" class="headerlink" title="在 JAVA 语言中容易被忽略的问题"></a>在 JAVA 语言中容易被忽略的问题</h2><blockquote>
<p>摘自于<a href="https://leetcode-cn.com/leetbook/detail/java-interview-highlights/">Leetcode java突击面试宝典</a>，仅供个人学习参考，转载请注明出处！</p>
</blockquote>
<span id="more"></span>

<h4 id="1-基本的数据结构"><a href="#1-基本的数据结构" class="headerlink" title="1. 基本的数据结构"></a>1. 基本的数据结构</h4><ol>
<li><p>直接量 概念：</p>
<p>直接量是在程序中直接出现的常量值</p>
<p>整数类型的直接量   默认是 <code>int </code>类型</p>
<p>浮点类型的直接量   默认是<code>double</code> 类型</p>
</li>
<li><p>整数类型的直接量 (默认是 $int$ 类型)  赋值   给整数类型的变量  </p>
<p>将整数类型的直接量赋值给整数类型的变量时，只要直接量没有超出变量的取值范围，即可直接赋值；</p>
<p>如果直接量超出了变量的取值范围，则会导致编译错误。</p>
</li>
<li><p>如果整数类型的直接量 超过了$int$ 的取值范围，就必须在直接量后面加上 <code>l</code>  ,将变量显性声明为 <code>long</code> 类型，否则会导致编译错误</p>
</li>
<li><p>如果要将直接量表示成 <code>float</code> 类型，则必须在其后面加上字母 F 或 f。将 <code>double</code> 类型的直接量赋值给 <code>float </code>类型的变量是不允许的，会导致编译错误。</p>
</li>
</ol>
<h4 id="2-面向对象"><a href="#2-面向对象" class="headerlink" title="2. 面向对象"></a>2. 面向对象</h4><ol>
<li><p><strong>静态</strong>，Java 的类成员（成员变量、方法等）可以是静态的或实例的。使用关键字<code> static</code> 修饰的类成员是静态的类成员，不使用关键字 <code> static</code> 修饰的类成员则是实例的类成员。</p>
<p>被 <code>static</code>修饰的方法，只能访问静态的方法/变量 ，不能访问实例的类成员</p>
<p>而 实例方法 既可以访问 实例的类成员，也可以访问静态的类成员</p>
</li>
</ol>
<h4 id="3-重载的条件"><a href="#3-重载的条件" class="headerlink" title="3. 重载的条件"></a>3. 重载的条件</h4><ol>
<li>函数名必须相同</li>
<li>参数列表必须不同（个数不同，类型不同，参数类型的排列顺序不同）</li>
<li>返回类型 可以相同 可以不同</li>
<li>仅 返回类型不同 不能构成方法的重载</li>
<li>重载是发生在编译时，因为编译器可以根据参数的类型类选择使用哪种方法</li>
</ol>
<h4 id="4-重写"><a href="#4-重写" class="headerlink" title="4. 重写"></a>4. 重写</h4><p>​        重载 与 重写 名字相似但  两者是完全不同的关系，</p>
<ol>
<li>方法的重写 是描述子类与父类之间的，而重载指的的在一个类中</li>
<li>重写的方法必须要和父类保持一致，包括返回值类型，方法名，参数列表</li>
</ol>
<h4 id="5-类中初始化的顺序"><a href="#5-类中初始化的顺序" class="headerlink" title="5. 类中初始化的顺序"></a>5. 类中初始化的顺序</h4><ol>
<li><p>静态属性    初始化</p>
</li>
<li><p>静态方法块初始化</p>
</li>
<li><p>普通属性    初始化</p>
</li>
<li><p>普通方法块初始化</p>
</li>
<li><p>构造函数    初始化<br> 例：</p>
</li>
</ol>
  <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyClass</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="comment">//静态属性</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String staticField = getStaticField();</span><br><span class="line">    <span class="comment">//静态方法块</span></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(staticField);</span><br><span class="line">        System.out.println(<span class="string">&quot;静态方法块初始化&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//普通属性</span></span><br><span class="line">    <span class="keyword">private</span> String field=getField();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//普通方法块</span></span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;普通方法块初始化&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//构造方法</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyClass</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;构造函数初始化&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">getField</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        String filed = <span class="string">&quot;普通属性初始化&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> filed;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">getStaticField</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        String statiFiled = <span class="string">&quot;静态属性初始化&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> statiFiled;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        MyClass myClass=<span class="keyword">new</span> MyClass();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//打印结果</span></span><br><span class="line">    静态属性初始化</span><br><span class="line">	静态方法块初始化</span><br><span class="line">	普通方法块初始化</span><br><span class="line">	构造函数初始化</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="6-Static"><a href="#6-Static" class="headerlink" title="6. Static"></a>6. Static</h4><ol>
<li><p>static 修饰 成员变量 称为 类变量</p>
<p>可以直接通过 <strong>类名.类变量名</strong> 访问或修改 不需要通过对象访问</p>
</li>
<li><p>static 修饰 成员函数 称为 静态方法</p>
<ul>
<li>可以直接通过 <strong>类名.方法名</strong> 调用 ，不需要通过对象访问</li>
<li>静态方法 <strong>只能</strong>访问静态的成员变量 或者静态的方法</li>
<li>静态方法中 不能含有 <code>this</code> 关键字</li>
</ul>
</li>
<li><p>static 修饰 内部类（static只能修饰内部类）了解</p>
<p>一般内部类的定义都是如下形式</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Outter</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String name = <span class="string">&quot;Outter&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Inner</span> //只有<span class="title">public</span> 修饰符</span></span><br><span class="line"><span class="class">    </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Inner为测试而生！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这种内部类的实例化方法 是：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Outter.Inner inner=<span class="keyword">new</span> Outter().n<span class="function">ew <span class="title">Inner</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure>

<p>而被<code>static</code> 修饰了的内部类 是如下形式</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Outter</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String name = <span class="string">&quot;Outter&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">StaticInner</span> //内部类被 <span class="title">static</span>修饰</span></span><br><span class="line"><span class="class">    </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;StaticInner为测试而生！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>被<code>static</code>修饰的实例化方法是：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Outter.StaticInner staticInner=<span class="keyword">new</span> Outter.StaticInner();</span><br></pre></td></tr></table></figure></li>
</ol>
<h4 id="7-Final"><a href="#7-Final" class="headerlink" title="7. Final"></a>7. Final</h4><ol>
<li><p>final 修饰 类 </p>
<p>表示该类不可被继承，并且该类的成员方法 也会被隐式的指定为final，成员变量 根据需要 自己设置是否被final 修饰</p>
</li>
<li><p>final 修饰 方法</p>
<p>表示这个方法不能被子类重写 </p>
</li>
<li><p>final 修饰 变量</p>
<ul>
<li>修饰基本数据类型 表示该值不可被修改</li>
<li>修饰引用数据类型  表示其对其初始化以后便不能再能其指向另一个对象</li>
</ul>
</li>
</ol>
<h4 id="8-接口"><a href="#8-接口" class="headerlink" title="8. 接口"></a>8. 接口</h4><ol>
<li>包含的方法<ul>
<li>抽象方法（只有函数的声明）</li>
<li>默认方法</li>
<li>静态方法</li>
<li>私有方法</li>
</ul>
</li>
<li>接口只能使用 <code>public</code> <code>defaylt</code> 修饰</li>
<li>接口不能被实例化</li>
<li>接口的实现类 必须将接口中的抽象方法重写 否则 该类为抽象类</li>
</ol>
<h4 id="9-函数式接口"><a href="#9-函数式接口" class="headerlink" title="9.函数式接口"></a>9.函数式接口</h4><p>视频教程:<a href="https://www.bilibili.com/video/BV1V4411p7EF?p=10&spm_id_from=pageDriver">狂神说</a></p>
<p>函数式接口(Function interface) 是java8新引入的这一种。</p>
<ol>
<li><p>定义：任何一个接口，如果接口中只包含<strong>唯一一个</strong>抽象方法，那么就是函数式接口</p>
</li>
<li><p>特性：对于函数式接口，可以采用Lambda表达式来创建该接口的对象</p>
</li>
<li><p>为什么要引入lambda 表达式，还是为了简化代码，梳理一下 要调用一个接口的实现类 改进过程</p>
<ul>
<li>在同一个包下，创建Main class ，接口，以及 接口的实现类 三个文件</li>
<li>在同一个.java文件下 ，在Main.class ｛｝外部 创建 一个实现类 和接口</li>
<li>在同一个.java文件下，在Main.class｛｝内部  pswm 外部 创建一个静态外部类，接口还是在Main.class｛｝外部</li>
<li>在同一个.java文件下，在Main.class｛｝内部  pswm 内部 创建一个内部类，接口还是在Main.class｛｝外部</li>
<li>在同一个.java文件下，在Main.class｛｝内部  pswm 内部  创建一个匿名内部类，接口同上</li>
<li>使用Lambda表达式（代码如下）</li>
</ul>
</li>
<li><p>示例：下面两个线程都是打印一句话</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LambdaPractice</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;匿名内部类实现&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; System.out.println(<span class="string">&quot;lambda表达式实现&quot;</span>)).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h4 id="10-抽象类"><a href="#10-抽象类" class="headerlink" title="10. 抽象类"></a>10. 抽象类</h4><p>抽象类 是一种抽象能力弱于接口的类 </p>
<p>特征：</p>
<ol>
<li>包含抽象方法的类 一定是抽象类</li>
<li>抽象类不一定包含 抽象方法</li>
<li>在抽象类中 还可以定义 成员变量 成员函数 构造方法 静态变量 静态方法</li>
<li>抽象类不能被实例化 </li>
</ol>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
      </tags>
  </entry>
  <entry>
    <title>Android开发 | RecyclerView 仿QQ聊天界面实现</title>
    <url>/2021/03/21/Andorid%E5%BC%80%E5%8F%91--RecyclerView-%E4%BB%BFQQ%E8%81%8A%E5%A4%A9%E7%95%8C%E9%9D%A2%E5%AE%9E%E7%8E%B0/</url>
    <content><![CDATA[<blockquote>
<p>前言：看了郭霖先生的著作《第一行代码-第二版》决定自己动手实现一个，该篇博客包含了APP制作的全部流程，RecyclerView 视频教程<a href="https://www.bilibili.com/video/BV13y4y1E7pF?p=22">RecyclerView 基础使用教程</a></p>
</blockquote>
<span id="more"></span>

<h2 id="RecyclerView-仿QQ聊天界面实现"><a href="#RecyclerView-仿QQ聊天界面实现" class="headerlink" title="RecyclerView 仿QQ聊天界面实现"></a>RecyclerView 仿QQ聊天界面实现</h2><h5 id="1-效果图"><a href="#1-效果图" class="headerlink" title="1. 效果图"></a>1. 效果图</h5><img src="https://i.loli.net/2021/03/21/j9ialQO3e1gcYb5.gif" alt="1" style="zoom:67%;">

<h5 id="2-步骤"><a href="#2-步骤" class="headerlink" title="2. 步骤"></a>2. 步骤</h5><h6 id="2-1-材料准备"><a href="#2-1-材料准备" class="headerlink" title="2.1 材料准备"></a>2.1 材料准备</h6><p>​    在这里分享一个好用到炸裂的图库<a href="https://www.iconfont.cn/">阿里巴巴矢量图标库</a> ,先注册，才可以下载里面的图片，从上述的演示图中 我们需要四个图片 </p>
<ol>
<li><p>男生头像</p>
</li>
<li><p>女生头像</p>
</li>
<li><p>左聊天气泡</p>
</li>
<li><p>右聊天气泡</p>
<p>都可以在<a href="https://www.iconfont.cn/">阿里巴巴矢量图标库</a> 找到 ，并下载在当前工程目录下的drawable文件夹下 <strong>PS：一定要是PNG格式</strong></p>
</li>
</ol>
<h6 id="2-2-9图制作"><a href="#2-2-9图制作" class="headerlink" title="2.2 9图制作"></a>2.2 9图制作</h6><p>​    什么是9图？ 其实9图是安卓开发当中常用的一种图片格式(.9.png) ，这种图片有一个特点就是 他可以规定图片在被拉伸时，那一部分区域是可以被拉伸的，那一部分是放内容的，<strong>记住：左上 拉伸，右下内容</strong>，如何将PNG图片 转为.9.png格式的图片，在AndroidStudio中 右击PNG 图片就可以看到，<strong>注意：在创作完.9图片以后 需要把原来的图片删掉，不然AS会资源重复错误</strong>（个人觉得是因为 AS认为.9图和原来的图是一个资源）</p>
<p><img src="https://i.loli.net/2021/03/21/U5TSjsHrNdBxPGO.png" alt="image-20210321163245580"></p>
<img src="https://i.loli.net/2021/03/21/fwMeIZuyndgDrWP.png" alt="image-20210321163049337" style="zoom:67%;">

<h6 id="2-3-布局代码"><a href="#2-3-布局代码" class="headerlink" title="2.3 布局代码"></a>2.3 布局代码</h6><ol>
<li><p><code>activity_main</code> 布局</p>
<ul>
<li><p>效果图：<img src="https://i.loli.net/2021/03/21/U8DwIxZCdqH4iOf.png" alt="image-20210321163837502" style="zoom:67%;"></p>
</li>
<li><p>嵌套布局：整体就是一个<code>LinerLayout</code>中包含了<code>RecycleView</code>与两个<code>LinearLayout</code>，</p>
<p><img src="https://i.loli.net/2021/03/21/htifMuoVbC4S12a.png" alt="image-20210321163946521"></p>
</li>
<li><p>源码：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_margin</span>=<span class="string">&quot;3dp&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:orientation</span>=<span class="string">&quot;vertical&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    &lt;androidx.recyclerview.widget.RecyclerView</span><br><span class="line">        android:id=&quot;@+id/rv&quot;</span><br><span class="line">        android:layout_width=&quot;match_parent&quot;</span><br><span class="line">        android:layout_height=&quot;0dp&quot;</span><br><span class="line">        android:layout_weight=&quot;18&quot;/&gt;</span><br><span class="line">    &lt;LinearLayout</span><br><span class="line">        android:layout_width=&quot;match_parent&quot;</span><br><span class="line">        android:layout_height=&quot;0dp&quot;</span><br><span class="line">        android:orientation=&quot;horizontal&quot;</span><br><span class="line">        android:layout_weight=&quot;1&quot;&gt;</span><br><span class="line">        &lt;ImageView</span><br><span class="line">            android:id=&quot;@+id/img_photo&quot;</span><br><span class="line">            android:layout_width=&quot;0dp&quot;</span><br><span class="line">            android:layout_height=&quot;match_parent&quot;</span><br><span class="line">            android:layout_weight=&quot;1&quot;</span><br><span class="line">            android:padding=&quot;8dp&quot;</span><br><span class="line">            android:src=&quot;@drawable/photo&quot;/&gt;</span><br><span class="line">        &lt;ImageView</span><br><span class="line">            android:id=&quot;@+id/img_camera&quot;</span><br><span class="line">            android:layout_width=&quot;0dp&quot;</span><br><span class="line">            android:layout_height=&quot;match_parent&quot;</span><br><span class="line">            android:layout_weight=&quot;1&quot;</span><br><span class="line">            android:padding=&quot;8dp&quot;</span><br><span class="line">            android:src=&quot;@drawable/camera&quot;/&gt;</span><br><span class="line">        &lt;ImageView</span><br><span class="line">            android:id=&quot;@+id/img_express&quot;</span><br><span class="line">            android:layout_width=&quot;0dp&quot;</span><br><span class="line">            android:layout_height=&quot;match_parent&quot;</span><br><span class="line">            android:padding=&quot;8dp&quot;</span><br><span class="line">            android:layout_weight=&quot;1&quot;</span><br><span class="line">            android:src=&quot;@drawable/expression&quot;/&gt;</span><br><span class="line">        &lt;ImageView</span><br><span class="line">            android:id=&quot;@+id/img_add&quot;</span><br><span class="line">            android:layout_width=&quot;0dp&quot;</span><br><span class="line">            android:layout_height=&quot;match_parent&quot;</span><br><span class="line">            android:layout_weight=&quot;1&quot;</span><br><span class="line">            android:padding=&quot;8dp&quot;</span><br><span class="line">            android:src=&quot;@drawable/add&quot;/&gt;</span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br><span class="line">    &lt;LinearLayout</span><br><span class="line">        android:layout_width=&quot;match_parent&quot;</span><br><span class="line">        android:layout_height=&quot;wrap_content&quot;</span><br><span class="line">        android:orientation=&quot;horizontal&quot;&gt;</span><br><span class="line"></span><br><span class="line">        &lt;EditText</span><br><span class="line">            android:id=&quot;@+id/edit&quot;</span><br><span class="line">            android:layout_width=&quot;0dp&quot;</span><br><span class="line">            android:layout_height=&quot;match_parent&quot;</span><br><span class="line">            android:layout_weight=&quot;4&quot;</span><br><span class="line">            android:layout_marginLeft=&quot;5dp&quot;</span><br><span class="line">            android:hint=&quot;要发送的话&quot;</span><br><span class="line">            android:lines=&quot;2&quot;/&gt;</span><br><span class="line">        &lt;Button</span><br><span class="line">            android:id=&quot;@+id/btn_send&quot;</span><br><span class="line">            android:layout_width=&quot;0dp&quot;</span><br><span class="line">            android:layout_height=&quot;wrap_content&quot;</span><br><span class="line">            android:layout_weight=&quot;1&quot;</span><br><span class="line">            android:text=&quot;发送&quot; /&gt;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>RecycleView中<code>item_layout</code>布局</p>
<ul>
<li><p>效果图：</p>
</li>
<li><p>布局格式：整体我们采用了<code>RelativeLayout</code>，又嵌套了两个<code>LinearLayout</code> ，<code>LinearLayout</code>中又包含了 头像与 聊天框</p>
<p><img src="https://i.loli.net/2021/03/21/cxltiysqgD92nFz.png" alt="image-20210321164504456"></p>
</li>
<li><p>源码：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">RelativeLayout</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:padding</span>=<span class="string">&quot;10dp&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    &lt;LinearLayout</span><br><span class="line">        android:id=&quot;@+id/linear_left&quot;</span><br><span class="line">        android:layout_width=&quot;wrap_content&quot;</span><br><span class="line">        android:layout_height=&quot;wrap_content&quot;</span><br><span class="line">        android:layout_alignParentLeft=&quot;true&quot;</span><br><span class="line">        android:orientation=&quot;horizontal&quot;&gt;</span><br><span class="line"></span><br><span class="line">        &lt;ImageView</span><br><span class="line">            android:id=&quot;@+id/head_left&quot;</span><br><span class="line">            android:layout_width=&quot;wrap_content&quot;</span><br><span class="line">            android:layout_height=&quot;wrap_content&quot;</span><br><span class="line">            android:src=&quot;@drawable/boy_head&quot; /&gt;</span><br><span class="line"></span><br><span class="line">        &lt;LinearLayout</span><br><span class="line">            android:layout_width=&quot;wrap_content&quot;</span><br><span class="line">            android:layout_height=&quot;wrap_content&quot;</span><br><span class="line">            android:layout_marginLeft=&quot;3dp&quot;</span><br><span class="line">            android:background=&quot;@drawable/left&quot;&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            &lt;TextView</span><br><span class="line">                android:id=&quot;@+id/msg_left&quot;</span><br><span class="line">                android:layout_width=&quot;wrap_content&quot;</span><br><span class="line">                android:layout_height=&quot;wrap_content&quot;</span><br><span class="line">                android:layout_gravity=&quot;center&quot; /&gt;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    &lt;LinearLayout</span><br><span class="line">        android:id=&quot;@+id/linear_right&quot;</span><br><span class="line">        android:layout_width=&quot;wrap_content&quot;</span><br><span class="line">        android:layout_height=&quot;wrap_content&quot;</span><br><span class="line">        android:layout_below=&quot;@+id/linear_left&quot;</span><br><span class="line">        android:layout_alignParentRight=&quot;true&quot;&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &lt;LinearLayout</span><br><span class="line"></span><br><span class="line">            android:layout_width=&quot;wrap_content&quot;</span><br><span class="line">            android:layout_height=&quot;wrap_content&quot;</span><br><span class="line">            android:layout_marginLeft=&quot;3dp&quot;</span><br><span class="line">            android:layout_toLeftOf=&quot;@+id/head_right&quot;</span><br><span class="line">            android:background=&quot;@drawable/right&quot;&gt;</span><br><span class="line"></span><br><span class="line">            &lt;TextView</span><br><span class="line">                android:id=&quot;@+id/msg_right&quot;</span><br><span class="line">                android:layout_width=&quot;wrap_content&quot;</span><br><span class="line">                android:layout_height=&quot;wrap_content&quot;</span><br><span class="line">                android:layout_gravity=&quot;center&quot; /&gt;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        &lt;ImageView</span><br><span class="line">            android:id=&quot;@+id/head_right&quot;</span><br><span class="line">            android:layout_width=&quot;wrap_content&quot;</span><br><span class="line">            android:layout_height=&quot;wrap_content&quot;</span><br><span class="line">            android:layout_alignParentRight=&quot;true&quot;</span><br><span class="line">            android:src=&quot;@drawable/girl_head&quot; /&gt;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">RelativeLayout</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ol>
<h6 id="2-4-后台代码-看不懂-就去看前言中-的视频"><a href="#2-4-后台代码-看不懂-就去看前言中-的视频" class="headerlink" title="2.4 后台代码(看不懂 就去看前言中 的视频)"></a>2.4 后台代码(看不懂 就去看前言中 的视频)</h6><ol>
<li><p>Message类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Message</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> TYPE_RECEIVE = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> TYPE_SEND = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">private</span> String content;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> type;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Message</span><span class="params">(String content, <span class="keyword">int</span> type)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.content = content;</span><br><span class="line">        <span class="keyword">this</span>.type = type;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getContent</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> content;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setContent</span><span class="params">(String content)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.content = content;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> type;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setType</span><span class="params">(<span class="keyword">int</span> type)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.type = type;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>Adapter类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAdapter</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span>.<span class="title">Adapter</span>&lt;<span class="title">MyAdapter</span>.<span class="title">ViewHolder</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Message&gt; data;</span><br><span class="line">    <span class="keyword">private</span> Context context;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyAdapter</span><span class="params">(List&lt;Message&gt; data, Context context)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.data = data;</span><br><span class="line">        <span class="keyword">this</span>.context = context;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NonNull</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> MyAdapter.<span class="function">ViewHolder <span class="title">onCreateViewHolder</span><span class="params">(<span class="meta">@NonNull</span> ViewGroup parent, <span class="keyword">int</span> viewType)</span> </span>&#123;</span><br><span class="line">        View view = View.inflate(context, R.layout.item_layout, <span class="keyword">null</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ViewHolder(view);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onBindViewHolder</span><span class="params">(<span class="meta">@NonNull</span> MyAdapter.ViewHolder holder, <span class="keyword">int</span> position)</span> </span>&#123;</span><br><span class="line">        Message message = data.get(position);</span><br><span class="line">        <span class="keyword">if</span> (message.getType() == Message.TYPE_RECEIVE) &#123;</span><br><span class="line">            holder.linear_left.setVisibility(View.VISIBLE);</span><br><span class="line">            holder.linear_right.setVisibility(View.GONE);</span><br><span class="line">            holder.left_text.setText(message.getContent());</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            holder.linear_left.setVisibility(View.GONE);</span><br><span class="line">            holder.linear_right.setVisibility(View.VISIBLE);</span><br><span class="line">            holder.right_text.setText(message.getContent());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getItemCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> data == <span class="keyword">null</span> ? <span class="number">0</span> : data.size();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ViewHolder</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span>.<span class="title">ViewHolder</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> LinearLayout linear_left;</span><br><span class="line">        <span class="keyword">private</span> LinearLayout linear_right;</span><br><span class="line">        <span class="keyword">private</span> TextView left_text;</span><br><span class="line">        <span class="keyword">private</span> TextView right_text;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">ViewHolder</span><span class="params">(<span class="meta">@NonNull</span> View itemView)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">super</span>(itemView);</span><br><span class="line">            linear_left = itemView.findViewById(R.id.linear_left);</span><br><span class="line">            linear_right = itemView.findViewById(R.id.linear_right);</span><br><span class="line">            left_text = itemView.findViewById(R.id.msg_left);</span><br><span class="line">            right_text = itemView.findViewById(R.id.msg_right);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>activity_main 类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> EditText editText;</span><br><span class="line">    <span class="keyword">private</span> Button btn_send;</span><br><span class="line">    <span class="keyword">private</span> RecyclerView recyclerView;</span><br><span class="line">    <span class="keyword">private</span> ImageView img_add;</span><br><span class="line">    <span class="keyword">private</span> ImageView img_camera;</span><br><span class="line">    <span class="keyword">private</span> ImageView img_photo;</span><br><span class="line">    <span class="keyword">private</span> ImageView img_express;</span><br><span class="line">    <span class="keyword">private</span> MyAdapter adapter;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Message&gt; data = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        ActionBar actionBar = getSupportActionBar();</span><br><span class="line">        <span class="keyword">if</span> (actionBar != <span class="keyword">null</span>) &#123;</span><br><span class="line">            actionBar.hide();</span><br><span class="line">        &#125;</span><br><span class="line">        bindView();</span><br><span class="line">        init_data();</span><br><span class="line">        LinearLayoutManager linearLayoutManager = <span class="keyword">new</span> LinearLayoutManager(<span class="keyword">this</span>);</span><br><span class="line">        recyclerView.setLayoutManager(linearLayoutManager);</span><br><span class="line"></span><br><span class="line">        adapter = <span class="keyword">new</span> MyAdapter(data, <span class="keyword">this</span>);</span><br><span class="line">        recyclerView.setAdapter(adapter);</span><br><span class="line"></span><br><span class="line">        btn_send.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">                String s = editText.getText().toString();</span><br><span class="line">                <span class="keyword">if</span> (s.equals(<span class="string">&quot;&quot;</span>) == <span class="keyword">false</span>) &#123;</span><br><span class="line">                    Message message = <span class="keyword">new</span> Message(s, Message.TYPE_SEND);</span><br><span class="line">                    data.add(message);</span><br><span class="line">                    <span class="comment">//当有新消息时，刷新RecyclerView</span></span><br><span class="line">                    adapter.notifyItemInserted(data.size() - <span class="number">1</span>);</span><br><span class="line">                    <span class="comment">//将屏幕滚动到最新消息</span></span><br><span class="line">                    recyclerView.scrollToPosition(data.size() - <span class="number">1</span>);</span><br><span class="line">                    editText.setText(<span class="string">&quot;&quot;</span>);</span><br><span class="line"></span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    Toast.makeText(MainActivity.<span class="keyword">this</span>, <span class="string">&quot;发送消息不能为空！&quot;</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">bindView</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        editText = findViewById(R.id.edit);</span><br><span class="line">        btn_send = findViewById(R.id.btn_send);</span><br><span class="line">        recyclerView = findViewById(R.id.rv);</span><br><span class="line">        img_add = findViewById(R.id.img_add);</span><br><span class="line">        img_camera = findViewById(R.id.img_camera);</span><br><span class="line">        img_express = findViewById(R.id.img_express);</span><br><span class="line">        img_photo = findViewById(R.id.img_photo);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init_data</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Message meg1 = <span class="keyword">new</span> Message(<span class="string">&quot;Hello, 我叫白文磊&quot;</span>, Message.TYPE_RECEIVE);</span><br><span class="line">        data.add(meg1);</span><br><span class="line">        Message meg2 = <span class="keyword">new</span> Message(<span class="string">&quot;Hello, 我叫郭涵博&quot;</span>, Message.TYPE_SEND);</span><br><span class="line">        data.add(meg2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h5 id="3-源码分享"><a href="#3-源码分享" class="headerlink" title="3. 源码分享"></a>3. 源码分享</h5>]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>面试</tag>
        <tag>安卓开发</tag>
      </tags>
  </entry>
  <entry>
    <title>ListView的使用与调优</title>
    <url>/2021/03/19/ListView%E7%9A%84%E4%BD%BF%E7%94%A8%E4%B8%8E%E8%B0%83%E4%BC%98/</url>
    <content><![CDATA[<h2 id="Android开发-ListView-的使用与调优"><a href="#Android开发-ListView-的使用与调优" class="headerlink" title="Android开发 | ListView 的使用与调优"></a>Android开发 | ListView 的使用与调优</h2><blockquote>
<p>本节我们将讲述如何使用ListView 的使用与调优，配合着<a href="https://www.bilibili.com/video/BV13y4y1E7pF?p=21&spm_id_from=pageDriver">视频</a> 一起”下饭”,饭更香 !!</p>
</blockquote>
<span id="more"></span>

<h4 id="1-ListView-是什么？"><a href="#1-ListView-是什么？" class="headerlink" title="1. ListView 是什么？"></a>1. ListView 是什么？</h4><p><img src="https://i.loli.net/2021/03/19/sx5Le691Y83uzJG.png" alt="image-20210319154311244"></p>
<h4 id="2-ListView的基本使用"><a href="#2-ListView的基本使用" class="headerlink" title="2.ListView的基本使用"></a>2.ListView的基本使用</h4><ol>
<li><p>首先在XML布局界面中引入<code>ListView</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    &lt;ListView</span><br><span class="line">        android:id=&quot;@+id/lv&quot;</span><br><span class="line">        android:layout_width=&quot;match_parent&quot;</span><br><span class="line">        android:layout_height=&quot;match_parent&quot; /&gt;</span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>定义<code>ListView</code> 中 <code>item</code>的样式</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span>&gt;</span></span><br><span class="line">    &lt;TextView</span><br><span class="line">        android:id=&quot;@+id/tv&quot;</span><br><span class="line">        android:layout_width=&quot;wrap_content&quot;</span><br><span class="line">        android:layout_height=&quot;wrap_content&quot;</span><br><span class="line">        android:textSize=&quot;30sp&quot;/&gt;</span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>将<code>ListView</code>中的<code>item</code>定义为一个类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Bean</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Bean</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>准备数据 通过<code>List&lt;Bean&gt;</code>来存放数据</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> List&lt;Bean&gt; data = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">    Bean bean = <span class="keyword">new</span> Bean(<span class="string">&quot;LittleStone&quot;</span> + i);</span><br><span class="line">    data.add(bean);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>数据不能直接添加到<code>ListView</code>中，而是通过一个中间件<code>Adapter</code>，所以我们还需要自定义个<code>Myadapter</code>类（继承<code>BaseAdapter</code>）来包裹数据, 最重要的函数</p>
<p><code>getView</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Myadapter</span> <span class="keyword">extends</span> <span class="title">BaseAdapter</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Bean&gt; data;</span><br><span class="line">    <span class="keyword">private</span> Context context;</span><br><span class="line">    <span class="keyword">private</span> String TAG = <span class="string">&quot;Myadapter&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Myadapter</span><span class="params">(Context context, List&lt;Bean&gt; data)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.context = context;</span><br><span class="line">        <span class="keyword">this</span>.data = data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> data.size();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getItem</span><span class="params">(<span class="keyword">int</span> position)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> data.get(position);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getItemId</span><span class="params">(<span class="keyword">int</span> position)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> position;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 每个item出现在屏幕中就会被调用</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> View <span class="title">getView</span><span class="params">(<span class="keyword">int</span> position, View convertView, ViewGroup parent)</span> </span>&#123;</span><br><span class="line">        convertView = LayoutInflater.from(context).inflate(R.layout.list_item, parent, <span class="keyword">false</span>);</span><br><span class="line">        TextView textView = convertView.findViewById(R.id.tv);</span><br><span class="line">        textView.setText(data.get(position).getName());</span><br><span class="line">        Log.e(TAG, <span class="string">&quot;getView: &quot;</span>+position );</span><br><span class="line">        <span class="keyword">return</span> convertView;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>将<code>Adapter</code>与<code>ListView</code>绑定, </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ListView listView = findViewById(R.id.lv);</span><br><span class="line">listView.setAdapter(<span class="keyword">new</span> Myadapter(<span class="keyword">this</span>, data));</span><br></pre></td></tr></table></figure></li>
</ol>
<h4 id="3-ListView的调优过程"><a href="#3-ListView的调优过程" class="headerlink" title="3. ListView的调优过程"></a>3. ListView的调优过程</h4><h5 id="3-1使用convertView来记录缓存"><a href="#3-1使用convertView来记录缓存" class="headerlink" title="3.1使用convertView来记录缓存"></a>3.1使用<code>convertView</code>来记录缓存</h5><ol>
<li><p><code>getview函数</code>形参中的<code>convertView</code> 记录了之前创建的<code>convertView</code>，当第一次打开Android的ListView初始化时候，在Adapter中此时的convertView无疑均是空的，假设屏幕可以放<code>m</code>条item，那么会创建<code>m+1</code>个convertView</p>
</li>
<li><p>convertView发生作用的地方，就是当ListView在向上/向下滑动过程中，convertView缓存和复用机制才发挥出来。比如当手指在屏幕自下往上翻动ListView时候，此时ListView头部的item将滚出设备屏幕，而底部的新item将加载出来，此时convertView的复用机制将发挥作用。由于此前在ListView初始化阶段已经创建了九个全新的convertView，Android系统将之前ListView初始化阶段创建的<code>m</code>个全新convertView都缓存起来，现在，由于ListView的上下翻动，顶部和底部之前显示的item滚出设备屏幕不可见，Android系统要么完全回收这些convertView，要么复用这些convertView。ListView的item有一个共同点：在大多数情况下，这些item的View( **指的是 布局是相同的 都是一个item xml文件)**是相同的，所以，明智的做法是继续复用，这样无疑会提高系统加载性能，要知道每一次创建新的convertView，是有一定系统开销的。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (convertView == <span class="keyword">null</span>) &#123;</span><br><span class="line">            convertView = LayoutInflater.from(context).inflate(R.layout.list_item, parent, <span class="keyword">false</span>);</span><br><span class="line">            Log.i(TAG, <span class="string">&quot;位置&quot;</span> + position + <span class="string">&quot;,创建convertView&quot;</span> + <span class="string">&quot;index=&quot;</span> + index);</span><br><span class="line">            index += <span class="number">1</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    Log.i(TAG, <span class="string">&quot;位置&quot;</span> + position + <span class="string">&quot;使用缓存技术&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">TextView textView = convertView.findViewById(R.id.tv);</span><br><span class="line">textView.setText(data.get(position).getName());</span><br><span class="line"><span class="comment">//        Log.e(TAG, &quot;getView: &quot; + position);</span></span><br><span class="line"><span class="keyword">return</span> convertView;</span><br></pre></td></tr></table></figure>

<p>打印的日志 除了一开始屏幕14+1个 创建convertView 其余的都会使用缓存</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">com.littlestone.mylistview I/Myadapter: 位置0,创建convertViewindex=0</span><br><span class="line">com.littlestone.mylistview I/Myadapter: 位置1,创建convertViewindex=1</span><br><span class="line">com.littlestone.mylistview I/Myadapter: 位置2,创建convertViewindex=2</span><br><span class="line">com.littlestone.mylistview I/Myadapter: 位置3,创建convertViewindex=3</span><br><span class="line">com.littlestone.mylistview I/Myadapter: 位置4,创建convertViewindex=4</span><br><span class="line">com.littlestone.mylistview I/Myadapter: 位置5,创建convertViewindex=5</span><br><span class="line">com.littlestone.mylistview I/Myadapter: 位置6,创建convertViewindex=6</span><br><span class="line">com.littlestone.mylistview I/Myadapter: 位置7,创建convertViewindex=7</span><br><span class="line">com.littlestone.mylistview I/Myadapter: 位置8,创建convertViewindex=8</span><br><span class="line">com.littlestone.mylistview I/Myadapter: 位置9,创建convertViewindex=9</span><br><span class="line">com.littlestone.mylistview I/Myadapter: 位置10,创建convertViewindex=10</span><br><span class="line">com.littlestone.mylistview I/Myadapter: 位置11,创建convertViewindex=11</span><br><span class="line">com.littlestone.mylistview I/Myadapter: 位置12,创建convertViewindex=12</span><br><span class="line">com.littlestone.mylistview I/Myadapter: 位置13,创建convertViewindex=13</span><br><span class="line">com.littlestone.mylistview I/Myadapter: 位置14,创建convertViewindex=14</span><br><span class="line">com.littlestone.mylistview I/Myadapter: 位置15,创建convertViewindex=15</span><br><span class="line">com.littlestone.mylistview I/Myadapter: 位置0使用缓存技术</span><br><span class="line">com.littlestone.mylistview I/Myadapter: 位置15使用缓存技术</span><br><span class="line">com.littlestone.mylistview I/Myadapter: 位置16使用缓存技术</span><br><span class="line">com.littlestone.mylistview I/Myadapter: 位置17使用缓存技术</span><br><span class="line">	.........</span><br><span class="line">com.littlestone.mylistview I/Myadapter: 位置77使用缓存技术</span><br><span class="line">com.littlestone.mylistview I/Myadapter: 位置93使用缓存技术</span><br><span class="line">com.littlestone.mylistview I/Myadapter: 位置94使用缓存技术</span><br><span class="line">com.littlestone.mylistview I/Myadapter: 位置95使用缓存技术</span><br><span class="line">com.littlestone.mylistview I/Myadapter: 位置96使用缓存技术</span><br><span class="line">com.littlestone.mylistview I/Myadapter: 位置97使用缓存技术</span><br><span class="line">com.littlestone.mylistview I/Myadapter: 位置98使用缓存技术</span><br><span class="line">com.littlestone.mylistview I/Myadapter: 位置99使用缓存技术</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ol>
<h5 id="3-2-使用-自定义ViewHolder类来避免多次findViewByid"><a href="#3-2-使用-自定义ViewHolder类来避免多次findViewByid" class="headerlink" title="3.2 使用 自定义ViewHolder类来避免多次findViewByid"></a>3.2 使用 自定义ViewHolder类来避免多次findViewByid</h5><p>我们发现 <code>findviewByid</code>会被多次调用，这也是非常耗时的，通过使用一个自定义的内部类<code>Holder</code>里面放 item.xml的所需要控件 作为成员变量，在得到<code>convertView</code>后调用 <code>convertView</code>的<code>setTag()</code>将<code>Holder</code> 作为形参放入</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Holder holder;</span><br><span class="line"><span class="keyword">if</span> (convertView == <span class="keyword">null</span>) &#123;</span><br><span class="line">    convertView = LayoutInflater.from(context).inflate(R.layout.list_item, parent, <span class="keyword">false</span>);</span><br><span class="line">    holder = <span class="keyword">new</span> Holder();</span><br><span class="line">    holder.textView = convertView.findViewById(R.id.tv);</span><br><span class="line">    convertView.setTag(holder);</span><br><span class="line">    Log.i(TAG, <span class="string">&quot;位置&quot;</span> + position + <span class="string">&quot;,创建convertView&quot;</span> + <span class="string">&quot;index=&quot;</span> + index);</span><br><span class="line">    index += <span class="number">1</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    Log.i(TAG, <span class="string">&quot;位置&quot;</span> + position + <span class="string">&quot;使用缓存技术&quot;</span>);</span><br><span class="line">    holder = (Holder) convertView.getTag();</span><br><span class="line">&#125;</span><br><span class="line">holder.textView.setText(data.get(position).getName());</span><br><span class="line"><span class="keyword">return</span> convertView;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Holder</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> TextView textView;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>面试</category>
      </categories>
      <tags>
        <tag>面试</tag>
        <tag>安卓开发</tag>
      </tags>
  </entry>
  <entry>
    <title>Android开发 | LinearLayout布局</title>
    <url>/2021/03/19/Andorid%E5%BC%80%E5%8F%91-LinearLayout%E5%B8%83%E5%B1%80/</url>
    <content><![CDATA[<h2 id="Android开发-LinearLayout布局中的一些坑"><a href="#Android开发-LinearLayout布局中的一些坑" class="headerlink" title="Android开发 | LinearLayout布局中的一些坑"></a>Android开发 | LinearLayout布局中的一些坑</h2><h4 id="Linear布局中的一些坑"><a href="#Linear布局中的一些坑" class="headerlink" title="Linear布局中的一些坑"></a>Linear布局中的一些坑</h4><ol>
<li><p><code>layout_weight</code>分配的是 屏幕剩余的空间，如何理解？</p>
 <span id="more"></span>

<p>最普通情况下 在<code>LinerLayout</code>布局中 设置 <code>orientation</code>为 <code>vertical</code>, 布局中又包含了 三个块（我们以LinearLayout为例 填充一些背景颜色）</p>
<p>代码：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:orientation</span>=<span class="string">&quot;vertical&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    &lt;LinearLayout</span><br><span class="line">        android:background=&quot;#00ff00&quot;</span><br><span class="line">        android:layout_width=&quot;100dp&quot;</span><br><span class="line">        android:layout_height=&quot;100dp&quot;/&gt;</span><br><span class="line">    &lt;LinearLayout</span><br><span class="line">        android:background=&quot;#ffff00&quot;</span><br><span class="line">        android:layout_width=&quot;100dp&quot;</span><br><span class="line">        android:layout_height=&quot;100dp&quot;/&gt;</span><br><span class="line">    &lt;LinearLayout</span><br><span class="line">        android:background=&quot;#00ffff&quot;</span><br><span class="line">        android:layout_width=&quot;100dp&quot;</span><br><span class="line">        android:layout_height=&quot;100dp&quot;/&gt;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>结果如图：</p>
<img src="https://i.loli.net/2021/03/19/bwPiy9KJXWYGvcN.png" alt="image-20210319095755151" style="zoom:50%;">

<p>但 当我们设置每个块的<code>android:layout_weight=&quot;1&quot;</code>，并且 <code>android:layout_height=&quot;0dp&quot;</code>时 效果如下：，三个块在纵向平分了整个屏幕</p>
<img src="https://i.loli.net/2021/03/19/bnyoCAhmx1kHMRr.png" alt="image-20210319100148655" style="zoom:50%;">

<p>设置每个块的<code>android:layout_weight=&quot;1&quot;</code>，并且 <strong>最后一个块</strong><code>android:layout_height=&quot;100dp&quot;</code>时 效果如下：三个块就不是平分 屏幕里 而是下面这个要大</p>
<img src="https://i.loli.net/2021/03/19/AHryWeIF1o2q4O8.png" alt="image-20210319100408834" style="zoom:50%;">

<p>当设置第一个块的 <code>android:layout_height=&quot;match_parent&quot;</code>,其余块的<code>layout_height=&quot;0dp&quot;</code>，其余块的<code>weight</code> 均为1，结果并没有将屏幕三等分，而是只有最上面的块 ，<strong>因为<code>layout_weight</code> 分配的是 屏幕剩余空间</strong></p>
<p>代码</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;match_parent&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:orientation</span>=<span class="string">&quot;vertical&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;match_parent&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    &lt;LinearLayout</span><br><span class="line">        android:background=&quot;#00ff00&quot;</span><br><span class="line">        android:layout_width=&quot;100dp&quot;</span><br><span class="line">        android:layout_weight=&quot;1&quot;</span><br><span class="line">        android:layout_height=&quot;match_parent&quot;/&gt;</span><br><span class="line">    &lt;LinearLayout</span><br><span class="line">        android:background=&quot;#ffff00&quot;</span><br><span class="line">        android:layout_width=&quot;100dp&quot;</span><br><span class="line">        android:layout_weight=&quot;1&quot;</span><br><span class="line">        android:layout_height=&quot;0dp&quot;/&gt;</span><br><span class="line">    &lt;LinearLayout</span><br><span class="line">        android:background=&quot;#00ffff&quot;</span><br><span class="line">        android:layout_width=&quot;100dp&quot;</span><br><span class="line">        android:layout_weight=&quot;1&quot;</span><br><span class="line">        android:layout_height=&quot;0dp&quot;/&gt;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure>

<img src="https://i.loli.net/2021/03/19/7XcsujraiJVSBFp.png" alt="image-20210319100910853" style="zoom:50%;"></li>
<li></li>
</ol>
]]></content>
      <categories>
        <category>面试</category>
      </categories>
      <tags>
        <tag>面试</tag>
        <tag>安卓开发</tag>
      </tags>
  </entry>
  <entry>
    <title>基于Android8.0的APP消息推送</title>
    <url>/2021/03/18/%E5%9F%BA%E4%BA%8EAndroid8-0%E7%9A%84APP%E6%B6%88%E6%81%AF%E6%8E%A8%E9%80%81/</url>
    <content><![CDATA[<h2 id="基于Android8-0的消息推送"><a href="#基于Android8-0的消息推送" class="headerlink" title="基于Android8.0的消息推送"></a>基于Android8.0的消息推送</h2><blockquote>
<p>观看<a href="https://www.bilibili.com/video/BV13y4y1E7pF?p=11&spm_id_from=pageDriver">B站视频</a>, 文字看不懂 就看视频吧</p>
</blockquote>
<h4 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h4><p>​        Android8.0 新版本中 对APP的推送通知开始管理 分为了如下几个重要程度</p>
<span id="more"></span>

<p><img src="https://i.loli.net/2021/03/18/EYew1QuWDTKd5hS.png" alt="image-20210318201658957"></p>
<h4 id="如何发送一个消息？"><a href="#如何发送一个消息？" class="headerlink" title="如何发送一个消息？"></a>如何发送一个消息？</h4><p>我们从后向前分析 都需要用到哪些类 API</p>
<ol>
<li><p>我们通过如下的代码进行发送通知与取消通知</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//4.发送通知</span></span><br><span class="line">notificationManager.notify(<span class="number">1</span>, notification); <span class="comment">//第一个参数为 这个推送的id 自己设置 取消通知时使用，第二个参数是 通知内容</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 5. 取消通知</span></span><br><span class="line">notificationManager.cancel(<span class="number">1</span>);<span class="comment">//第一个参数为 这个推送的id 自己设置 取消通知时使用</span></span><br></pre></td></tr></table></figure>

<p>所以我们需要实例化 <code>notificationManager</code>, <code>notification</code></p>
</li>
<li><p>实例化<code>notificationManager</code>，并不是通过构造函数来实例化一个对象，而是调用<code>getSystemService(NOTIFICATION_SERVICE)</code> </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> NotificationManager notificationManager;<span class="comment">//当作成员变量 方便后续使用 </span></span><br><span class="line">notificationManager = (NotificationManager) getSystemService(NOTIFICATION_SERVICE);</span><br></pre></td></tr></table></figure></li>
<li><p>实例化  <code>notification</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//3.设置通知属性(标题, 内容等) Builder括号中第二个参数一定要与NotificationChannel中注册的一致【第四步中会提NotificationChannel】</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//下两行代码 为点击通知跳转活动做准备</span></span><br><span class="line">Intent intent=<span class="keyword">new</span> Intent(<span class="keyword">this</span>,MainActivity.class);</span><br><span class="line">PendingIntent pendingIntent = PendingIntent.getActivity(<span class="keyword">this</span>, <span class="number">0</span>, intent, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">Notification notification = <span class="keyword">new</span> NotificationCompat.Builder(<span class="keyword">this</span>, <span class="string">&quot;little&quot;</span>)</span><br><span class="line">    .setContentTitle(<span class="string">&quot;西大新闻&quot;</span>)<span class="comment">//设置通知标题</span></span><br><span class="line">    .setContentText(<span class="string">&quot;硕博楼公寓投入使用&quot;</span>)<span class="comment">//设置通知内容</span></span><br><span class="line">    .setSmallIcon(R.drawable.icon)<span class="comment">//设置通知图标</span></span><br><span class="line">    <span class="comment">//setLargeIcon 参数类型为Bitmap,需要将图片转换为Bitmap类型 通过BitmapFactory.decodeResource</span></span><br><span class="line">    .setLargeIcon(BitmapFactory.decodeResource(getResources(), R.drawable.img))</span><br><span class="line">    .setColor(Color.parseColor(<span class="string">&quot;#ff0000&quot;</span>))<span class="comment">//设置小图标的颜色 需要Int类型的参数 通过Color.parseColor()</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//########################################################################</span></span><br><span class="line">    <span class="comment">//设置点击通知后跳转到活动 需要PendingIntent 类型的参数</span></span><br><span class="line">    .setContentIntent(pendingIntent)</span><br><span class="line">    <span class="comment">//########################################################################</span></span><br><span class="line">    </span><br><span class="line">    .setAutoCancel(<span class="keyword">true</span>)<span class="comment">//设置点击后是否消失</span></span><br><span class="line">    .build();<span class="comment">//固定写法</span></span><br></pre></td></tr></table></figure></li>
<li><p>Andorid8.0 新特性</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//2.Android8.0新特性 系统控制通知的关键程度（可选）</span></span><br><span class="line"><span class="keyword">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.O) &#123;</span><br><span class="line">    NotificationChannel notificationChannel = <span class="keyword">new</span> NotificationChannel(<span class="string">&quot;little&quot;</span>, <span class="string">&quot;测试&quot;</span>,</span><br><span class="line">    NotificationManager.IMPORTANCE_HIGH);<span class="comment">//设置重要性程度</span></span><br><span class="line">    notificationManager.createNotificationChannel(notificationChannel);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>实验效果图：</p>
<img src="https://i.loli.net/2021/03/18/9GuYVHTjyLro42p.png" alt="image-20210318203237693" style="zoom: 67%;"></li>
</ol>
<img src="https://i.loli.net/2021/03/18/KIvxhOSBUe7u9dR.png" alt="image-20210318203351880" style="zoom: 67%;">]]></content>
      <categories>
        <category>面试</category>
      </categories>
      <tags>
        <tag>安卓开发</tag>
      </tags>
  </entry>
  <entry>
    <title>计算机网络|高频考点</title>
    <url>/2021/03/16/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E9%AB%98%E9%A2%91%E8%80%83%E7%82%B9/</url>
    <content><![CDATA[<h2 id="计算机网络-高频考点"><a href="#计算机网络-高频考点" class="headerlink" title="计算机网络|高频考点"></a>计算机网络|高频考点</h2><blockquote>
<p>摘录于<a href="https://leetcode-cn.com/leetbook/detail/networks-interview-highlights/">Leetcode -计算机网络高频面试考点</a>，仅供个人学习使用，请勿商业转载！未完待续……</p>
<span id="more"></span>
</blockquote>
<h3 id="0-协议栈"><a href="#0-协议栈" class="headerlink" title="0. 协议栈"></a>0. 协议栈</h3><h5 id="1-参考模型"><a href="#1-参考模型" class="headerlink" title="1. 参考模型"></a>1. 参考模型</h5><p><img src="https://i.loli.net/2021/03/15/t45Sn7KcweapI1y.png"></p>
<h5 id="2-OSI-模型和-TCP-IP-模型异同比较"><a href="#2-OSI-模型和-TCP-IP-模型异同比较" class="headerlink" title="2. OSI 模型和 TCP/IP 模型异同比较"></a>2. OSI 模型和 TCP/IP 模型异同比较</h5><p>​        相同点</p>
<ol>
<li>OSI参考模型与TCP-IP参考模型都采用了层次结构。</li>
<li>都能够提供面向连接和无连接两种通信服务机制。<br>不同点</li>
<li>OSI参考模型采用的七层模型；TCP-IP是四层结构。</li>
<li>TCP-IP参考模型没有对网络接口层进行细分，只是一些概念性的描述；OSI参考模型对服务和协议做了明确的区分</li>
<li>OSI先有模型，后有协议规范，适合于描述各种网络；TCP-IP是先有协议集然后建立模型，不适用于非TCP-IP网络</li>
<li>TCP-IP一开始就提出面向连接和无连接服务，而OSI开始只强调面向连接服务，直到很晚才开始制定无连接的服务标准</li>
<li>OSI参考模型虽然被看好，但将网络划分为七层，实现起来较困难；相反，TCP-IP参考模型虽然有许多不尽人意的地方，但作为一种简化的分层结构还是比较成</li>
</ol>
<h5 id="3-OSI-和-TCP-IP-协议之间的对应关系"><a href="#3-OSI-和-TCP-IP-协议之间的对应关系" class="headerlink" title="3. OSI 和 TCP/IP 协议之间的对应关系"></a>3. OSI 和 TCP/IP 协议之间的对应关系</h5><p><img src="https://i.loli.net/2021/03/15/QZJGoYSWHPwyhRg.png" alt="image-20210313094726526"></p>
<h5 id="4-数据在各层之间的传输过程"><a href="#4-数据在各层之间的传输过程" class="headerlink" title="4. 数据在各层之间的传输过程"></a>4. 数据在各层之间的传输过程</h5><ol>
<li>在发送主机端，一个应用层报文被传送到运输层。在最简单的情况下，运输层收取到报文并附上附加信息，该首部将被接收端的运输层使用。应用层报文和运输层首部信息一道构成了运输层报文段。附加的信息可能包括：允许接收端运输层向上向适当的应用程序交付报文的信息以及差错检测位信息。该信息让接收端能够判断报文中的比特是否在途中已被改变。</li>
<li>运输层则向网络层传递该报文段，网络层增加了如源和目的端系统地址等网络层首部信息，生成了网络层数据报。</li>
<li>该数据报接下来被传递给链路层，在数据链路层数据包添加发送端 MAC 地址和接收端 MAC 地址后被封装成数据帧，</li>
<li>在物理层数据帧被封装成比特流，之后通过传输介质传送到对端。</li>
</ol>
<h3 id="1-应用层"><a href="#1-应用层" class="headerlink" title="1. 应用层"></a>1. 应用层</h3><h5 id="1-Keep-Alive-和非-Keep-Alive-区别，对服务器性能有影响吗？"><a href="#1-Keep-Alive-和非-Keep-Alive-区别，对服务器性能有影响吗？" class="headerlink" title="1. Keep-Alive 和非 Keep-Alive 区别，对服务器性能有影响吗？"></a>1. Keep-Alive 和非 Keep-Alive 区别，对服务器性能有影响吗？</h5><p>​        在早期的 HTTP/1.0 中，浏览器每次 发起 HTTP 请求都要与服务器创建一个新的 TCP 连接，服务器完成请求处理后立即断开 TCP 连接，<strong>服务器不跟踪每个客户也不记录过去的请求</strong>。然而创建和关闭连接的过程需要消耗资源和时间，为了减少资源消耗，缩短响应时间，就需要重用连接。</p>
<p>​        在 HTTP/1.1 版本中默认使用持久连接，在此之前的 HTTP 版本的默认连接都是使用非持久连接，如果想要在旧版本的 HTTP 协议上维持持久连接，则需要指定 connection 的首部字段的值为 Keep-Alive 来告诉对方这个请求响应完成后不要关闭，下一次咱们还用这个请求继续交流，我们用一个示意图来更加生动的表示两者的区别：</p>
<p><img src="https://i.loli.net/2021/03/15/g51E8u7FCkhNeZp.png" alt="image-20210313101022587"></p>
<p>​        对于非 Keep=Alive 来说，必须为每一个请求的对象建立和维护一个全新的连接。对于每一个这样的连接，客户机和服务器都要分配 TCP 的缓冲区和变量，这给服务器带来的严重的负担，因为一台 Web 服务器可能同时服务于数以百计的客户机请求。</p>
<p>​        在 Keep-Alive 方式下，服务器在响应后保持该 TCP 连接打开，在同一个客户机与服务器之间的后续请求和响应报文可通过相同的连接进行传送。甚至位于同一台服务器的多个 Web 页面在从该服务器发送给同一个客户机时，可以在单个持久 TCP 连接上进行。</p>
<p>​        然而，Keep-Alive并不是没有缺点的，当长时间的保持TCP连接时容易导致系统资源被无效占用，若对Keep Alive模式配置不当，将有可能比非Keep-Alive模式带来的损失更大。因此，我们需要正确地设置Keep-Alive timeout参数，当TCP连接在传送完最后一个HTTP响应，该连接会保持keep alive timeout秒，之后就开始关闭这个链接。</p>
<h5 id="2-Get请求与POST请求"><a href="#2-Get请求与POST请求" class="headerlink" title="2. Get请求与POST请求"></a>2. Get请求与POST请求</h5><ol>
<li><p>get 提交的数据会放在 URL 之后，并且请求参数会被完整的保留在浏览器的记录里，由于参数直接暴露在 URL 中，可能会存在安全问题，因此往往用于获取资源信息。而 post 参数放在请求主体中，并且参数不会被保留，相比 get 方法，post 方法更安全，主要用于修改服务器上的资源</p>
</li>
<li><p>get 提交的数据大小有限制（这里所说的限制是针对浏览器而言的），而 post 方法提交的数据没限制</p>
</li>
<li><p>get 方法产生一个 TCP 数据包，post 方法产生两个（并不是所有的浏览器中都产生两个）</p>
<p><strong>原因</strong>： 对于GET方式的请求，浏览器会把http header和data一并发送出去，服务端响应200，请求成功。</p>
<p>对于POST方式的请求，浏览器会先发送http header给服务端，告诉服务端等一下会有数据过来，服务端响应100 continue，告诉浏览器我已经准备接收数据，浏览器再post发送一个data给服务端，服务端响应200，请求成功。</p>
<h5 id="3-HTTP-与-HTTPS-建立连接的过程"><a href="#3-HTTP-与-HTTPS-建立连接的过程" class="headerlink" title="3. HTTP 与 HTTPS 建立连接的过程"></a>3. HTTP 与 HTTPS 建立连接的过程</h5></li>
</ol>
<ul>
<li><p>HTTP</p>
<ol>
<li><p>TCP三次握手</p>
</li>
<li><p>HTTP请求报文</p>
</li>
<li><p>HTTP响应报文</p>
</li>
<li><p>TCP四次挥手</p>
<p>明文传输</p>
</li>
</ol>
</li>
<li><p>HTTPS</p>
<ol>
<li><p>客户端向服务器端 发送 自己支持的加密算法，以及 随机数A</p>
</li>
<li><p>服务器端收到随机数A，向客户端发送数字证书 以及随机数B</p>
</li>
<li><p>客户端 收到随机数B，验证数字证书是否有效，并产生随机数C 并且利用数字证书中的公钥对随机数C加密，发送给服务器端</p>
</li>
<li><p>服务器端利用自身的私钥对加密数字C解密 得到数字C，向客户端发送finish报文 包含了解密以后的数字，告诉客户端自己能够解密</p>
</li>
</ol>
</li>
</ul>
<h5 id="4-HTTP-与-HTTPS的区别"><a href="#4-HTTP-与-HTTPS的区别" class="headerlink" title="4. HTTP 与 HTTPS的区别"></a>4. HTTP 与 HTTPS的区别</h5><ol>
<li><p>HTTP采用明文传输，HTTPS采用密文传输（对称加密技术）</p>
</li>
<li><p>HTTP采用80端口号 HTTPS采用443端口号</p>
</li>
<li><p>HTTPS 协议需要到数字认证机构（Certificate Authority, CA）申请证书，一般需要一定的费用。</p>
</li>
<li><p>HTTP 页面响应比 HTTPS 快，主要因为 HTTP 使用 3 次握手建立连接，客户端和服务器需要握手 3 次，而 HTTPS 除了 TCP 的 3 次握手，还需要经历一个 SSL 协商过程。</p>
</li>
</ol>
<h5 id="5-HTTP如何保存用户状态"><a href="#5-HTTP如何保存用户状态" class="headerlink" title="5. HTTP如何保存用户状态"></a>5. HTTP如何保存用户状态</h5><ol>
<li><p>基于Session实现的会话保持</p>
<ul>
<li><p>是什么</p>
<p>客户端在第一次向服务器发送了请求以后，服务器端会创建一个<code>Session对</code>象 通过键值对的形式存储到服务器端，并在响应报文中为客户端分配一个<code>SessionID </code>存储在客户端的<code>Cookie</code>中</p>
<p>客户端之后的请求会把<code>SessionID </code>带上，服务器根据<code>SessionID </code>会之前的会话建立联系</p>
</li>
<li><p>优点</p>
<p>安全，用户数据存储在了服务器端</p>
</li>
<li><p>缺点</p>
<p>大型网站往往采用分布式服务器，且采用负载均衡的技术，客户端连续两次的请求 可能分布到了两台不同的服务器，基于Session的方法就不能实现会话保持</p>
</li>
</ul>
</li>
<li><p>基于Cookie实现的会话保持</p>
<ul>
<li><p>是什么</p>
</li>
<li><p>优点</p>
</li>
<li><p>缺点</p>
<h5 id="6-HTTP状态码"><a href="#6-HTTP状态码" class="headerlink" title="6. HTTP状态码"></a>6. HTTP状态码</h5></li>
</ul>
</li>
</ol>
<h5 id="7-DNS-域名解析的过程"><a href="#7-DNS-域名解析的过程" class="headerlink" title="7. DNS 域名解析的过程"></a>7. DNS 域名解析的过程</h5><h5 id="8-用户输入网址到显示对应页面的全过程"><a href="#8-用户输入网址到显示对应页面的全过程" class="headerlink" title="8. 用户输入网址到显示对应页面的全过程"></a>8. 用户输入网址到显示对应页面的全过程</h5><h3 id="2-传输层"><a href="#2-传输层" class="headerlink" title="2. 传输层"></a>2. 传输层</h3><h5 id="1-TCP三次握手与四次挥手机制"><a href="#1-TCP三次握手与四次挥手机制" class="headerlink" title="1. TCP三次握手与四次挥手机制"></a>1. TCP三次握手与四次挥手机制</h5><h5 id="2-为什么需要三次握手-而不是-两次"><a href="#2-为什么需要三次握手-而不是-两次" class="headerlink" title="2.为什么需要三次握手 而不是 两次"></a>2.为什么需要三次握手 而不是 两次</h5><h5 id="3-为什么需要四次挥手-而不是三次"><a href="#3-为什么需要四次挥手-而不是三次" class="headerlink" title="3.为什么需要四次挥手 而不是三次"></a>3.为什么需要四次挥手 而不是三次</h5><h5 id="4-为什么TCP连接释放时，客户端要等待两个传播时延，再断开连接"><a href="#4-为什么TCP连接释放时，客户端要等待两个传播时延，再断开连接" class="headerlink" title="4. 为什么TCP连接释放时，客户端要等待两个传播时延，再断开连接"></a>4. 为什么TCP连接释放时，客户端要等待两个传播时延，再断开连接</h5><h5 id="5-如果TCP三次握手每次报文都丢失了，客户端与服务器端会怎样处理"><a href="#5-如果TCP三次握手每次报文都丢失了，客户端与服务器端会怎样处理" class="headerlink" title="5.如果TCP三次握手每次报文都丢失了，客户端与服务器端会怎样处理"></a>5.如果TCP三次握手每次报文都丢失了，客户端与服务器端会怎样处理</h5><ol>
<li><p>第一次握手 客户端向服务器端 发送连接请求报文段 <code>SYN=1,ACK=0,seq=x</code>，</p>
<p>如果请求报文丢失了，客户端会启动超时重传机制，直到达到了最高重传次数，发送ICMP差错报文</p>
<p>​                                       服务端没有任何动作</p>
</li>
<li><p>第二次握手 服务器端接收到 连接请求报文段，同意建立连接向客户端返回确认</p>
<p>如果确认报文丢失了，客户端会启动超时重传机制，直到达到了最高重传次数，发送ICMP差错报文</p>
<p>​                                      服务端阻塞到 <code>acept()</code>等待客户端返回确认</p>
</li>
<li><p>若第三次握手服务器未接收到客户端发送过来的 ACK 报文，</p>
<p>服务器会采取类似于客户端的超时重传机制，若重传次数超过限制后仍然没有回应，则 <code>accep()</code> 系统调用返回 -1，服务器端连接建立失败</p>
<p>客户端认为连接已经建立，开始传输数据，当服务器收到客户端发送来的数据 会发送<code>RST</code>报文给客户端，消除客户端建立的单方面连接</p>
</li>
</ol>
<h5 id="6"><a href="#6" class="headerlink" title="6."></a>6.</h5><h3 id="3-网络层"><a href="#3-网络层" class="headerlink" title="3. 网络层"></a>3. 网络层</h3><h3 id="4-数据链路层"><a href="#4-数据链路层" class="headerlink" title="4. 数据链路层"></a>4. 数据链路层</h3><h3 id="5-物理层"><a href="#5-物理层" class="headerlink" title="5. 物理层"></a>5. 物理层</h3><p>参考链接</p>
<p><a href="https://leetcode-cn.com/leetbook/detail/networks-interview-highlights/">1. Leetcode计算机网络突击面试</a></p>
]]></content>
      <categories>
        <category>面试</category>
      </categories>
      <tags>
        <tag>面试</tag>
        <tag>计算机网络</tag>
      </tags>
  </entry>
  <entry>
    <title>数组中的第K个最大元素</title>
    <url>/2021/03/15/%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E7%AC%ACK%E4%B8%AA%E6%9C%80%E5%A4%A7%E5%85%83%E7%B4%A0/</url>
    <content><![CDATA[<h2 id="面试高频考题—TOP-K问题"><a href="#面试高频考题—TOP-K问题" class="headerlink" title="面试高频考题—TOP K问题"></a>面试高频考题—TOP K问题</h2><p>选自<a href="https://leetcode-cn.com/problems/kth-largest-element-in-an-array/">Leetcode  数组中第K大元素</a></p>
<ul>
<li><p>题目描述：在未排序的数组中找到第 <strong>k</strong> 个最大的元素。请注意，你需要找的是数组排序后的第 k 个最大的元素，而不是第 k 个不同的元素。</p>
<span id="more"></span></li>
<li><p>算法思路：我们知道快速排序的每一次排序结果 都会确定 <code>基准元素</code> 的位置 假设为 <code>mid</code>，另外题目要求找的是第<code>K</code>个最大的元素，而不是第<code>k</code>个最小的 元素，所以我们需要找到第<code>K</code>个最大的元素  下标与  第<code>k</code>个最小的 元素 下标之间的转换关系 我们举个例子</p>
<p>假设共有100个数 分别是从1到100，那么 第<code>1</code>个最大的数 <code>100</code>，也就是第<code>100</code>个最小的元素，这个最小元素（也就是<code>100</code>）在排序后 所处的下标应该是<code>99</code>,</p>
<p>同理， 那么 第<code>2</code>个最大的数 <code>99</code>，也就是第<code>99</code>个最小的元素，这个最小元素（也就是<code>99</code>）在排序后 所处的下标应该是<code>98</code></p>
<p>所以 我们很容易找到类比关系 第<code>K</code>个最大的元素  下标与  第<code>k</code>个最小的 元素 下标之间的转换关系为</p>
<blockquote>
<p>第<code>k</code>个最小的 元素 下标 = 数组长度 - 第<code>K</code>个最大的元素  下标</p>
</blockquote>
</li>
<li><p>我们在得到<code>基准元素</code> 的位置  <code>mid</code>后，就可以 通过比较 <code>mid</code> 与 <code>k</code> 之间的关系 来判断我们所要找的数 在<code>mid</code>之前 还是之后</p>
<p>算法描述到这里 已经呼之欲出了，下面给出<code>python</code> 版本的 答案</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">findKthLargest</span>(<span class="params">self, nums: List[<span class="built_in">int</span>], k: <span class="built_in">int</span></span>) -&gt; int:</span></span><br><span class="line">        <span class="comment"># TOP K问题</span></span><br><span class="line">        <span class="comment"># 使用快速排序的思想</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">quick_sort</span>(<span class="params">nums,low,high</span>):</span></span><br><span class="line">            flag=nums[low]</span><br><span class="line">            <span class="keyword">while</span> low&lt;high: <span class="comment"># 这里没有等于号</span></span><br><span class="line">                <span class="comment">#从右到左 找比flag小的数</span></span><br><span class="line">                <span class="keyword">while</span> low&lt;high <span class="keyword">and</span> nums[high]&gt;=flag:<span class="comment">#????</span></span><br><span class="line">                    high-=<span class="number">1</span></span><br><span class="line">                nums[low]=nums[high]</span><br><span class="line">                <span class="comment"># 从左到右 找flag 大的数</span></span><br><span class="line">                <span class="keyword">while</span> low&lt;high <span class="keyword">and</span> nums[low]&lt;=flag:</span><br><span class="line">                    low+=<span class="number">1</span></span><br><span class="line">                nums[high]=nums[low]</span><br><span class="line">            nums[low]=flag</span><br><span class="line">            <span class="keyword">return</span> low</span><br><span class="line">        </span><br><span class="line">        low=<span class="number">0</span></span><br><span class="line">        random.shuffle(nums) <span class="comment">#YYDS</span></span><br><span class="line">        high=<span class="built_in">len</span>(nums)-<span class="number">1</span></span><br><span class="line">        k=<span class="built_in">len</span>(nums)-k </span><br><span class="line">        <span class="keyword">while</span> low&lt;=high:</span><br><span class="line">            mid=quick_sort(nums,low,high)</span><br><span class="line">            <span class="keyword">if</span> mid==k:</span><br><span class="line">                <span class="keyword">return</span> nums[mid]</span><br><span class="line">            <span class="keyword">elif</span> mid&gt;k:</span><br><span class="line">                high=mid-<span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                low=mid+<span class="number">1</span></span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>面试</category>
      </categories>
      <tags>
        <tag>面试</tag>
        <tag>算法</tag>
        <tag>leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux学习笔记</title>
    <url>/2021/03/15/Linux%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h2 id="Linux-学习笔记"><a href="#Linux-学习笔记" class="headerlink" title="Linux 学习笔记"></a>Linux 学习笔记</h2><blockquote>
<p>摘自于 <a href="https://leetcode-cn.com/leetbook/detail/awesome-linux-handbook/">硬核Linux 攻略</a>，仅供个人学习使用，转载请注明出处</p>
 <span id="more"></span>
</blockquote>
<h4 id="1-Linux进程通信方式"><a href="#1-Linux进程通信方式" class="headerlink" title="1. Linux进程通信方式"></a>1. Linux进程通信方式</h4><ul>
<li><p>信号</p>
<ol>
<li><p>信号是软件层次上对中断机制的一种模拟，是一种异步通信方式</p>
</li>
<li><p>信号来源：硬件来源：按下了键盘 或者 其他硬件故障</p>
<p>​                    软件来源：最常用发送信号的系统函数是kill, raise, alarm和setitimer以及sigqueue函数，软件来源还包括一些非法运算等操作</p>
</li>
<li><p> 进程对信号的处理：</p>
</li>
</ol>
<p>   ​                            忽略信号：但不能忽略SIGSTOP 与SIGKILL信号</p>
<p>   ​                            捕捉信号：执行相应的处理函数</p>
<p>   ​                            执行缺省操作</p>
</li>
<li><p>管道</p>
<ol>
<li><p>管道的作用正如其名，需要通信的两个进程在管道的两端，进程利用管道传递信息。</p>
<p>管道对于管道两端的进程而言，就是一个文件，但是这个文件比较特 殊，它不属于文件系统并且只存在于内存中</p>
</li>
<li><p>管道 又分为： 命名管道 与  匿名管道</p>
</li>
<li><p>匿名管道有两大限制：1. 管道是半双工的，数据只能在一个方向上流动</p>
</li>
</ol>
<p>​                                               2. 管道只能用于有亲缘关系的进程，而命名管道允许没有亲缘关系的进程进行通信 </p>
</li>
<li><p>先入先出队列</p>
</li>
<li><p>信号队列</p>
</li>
<li><p>共享内存</p>
<ol>
<li>为了在多个进程间交换信息，内核专门留出了一块内存区，可以由需要访问的进程将其映射到自己的私有地址空间。进程就可以直接读写这一块内存而不需要进行数据的拷贝，从而大大提高效率。</li>
<li>共享内存并未提供同步机制，在一个进程结束对共享内存的写操作之前，并无自动机制可以阻止另二个进程开始对它进行读取。所以，我们通常需要用其他的机制来同步对共享内存的访问。</li>
</ol>
</li>
<li><p>套接字 Socket</p>
<ol>
<li>面向连接的通信方式TCP</li>
<li>无连接的通信方式UDP</li>
</ol>
</li>
</ul>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>软件工程 | 核心概念</title>
    <url>/2021/03/13/%E8%BD%AF%E4%BB%B6%E5%B7%A5%E7%A8%8B%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/</url>
    <content><![CDATA[<h2 id="软件工程-核心概念"><a href="#软件工程-核心概念" class="headerlink" title="软件工程|核心概念"></a>软件工程|核心概念</h2> <span id="more"></span>

<h3 id="一、软件与软件危机"><a href="#一、软件与软件危机" class="headerlink" title="一、软件与软件危机"></a>一、软件与软件危机</h3><h4 id="1-软件的概念"><a href="#1-软件的概念" class="headerlink" title="1. 软件的概念"></a>1. 软件的概念</h4><ol>
<li><p>软件 = 程序 + 数据 + 文档 + （服务）</p>
<p>程序 = 数据结构 + 算法</p>
<p>软件是一种逻辑实体，具备知识性的产品集合；是物理世界的一种抽象化；是一种人脑智力的成果，开发成本昂贵但可复制</p>
</li>
</ol>
<h4 id="2-软件的分类"><a href="#2-软件的分类" class="headerlink" title="2. 软件的分类"></a>2. 软件的分类</h4><ol>
<li>系统软件：操作系统，数据库管理系统，驱动程序</li>
<li>应用软件：娱乐软件，个人PC软件</li>
<li>工具软件：文档编辑软件</li>
<li>可重用软件</li>
</ol>
<h4 id="3-软件的特点"><a href="#3-软件的特点" class="headerlink" title="3. 软件的特点"></a>3. 软件的特点</h4><ol>
<li>是对物理世界的抽象化</li>
<li>是开发人员的智力劳动成果</li>
<li>软件具备强烈的个性化特征</li>
<li>软件规模日益庞大，实现的业务逻辑与流程复杂</li>
</ol>
<h4 id="4-软件产品的组成"><a href="#4-软件产品的组成" class="headerlink" title="4. 软件产品的组成"></a>4. 软件产品的组成</h4><ol>
<li>市场需求说明书</li>
<li>客户需求说明书</li>
<li>软件规格说明书</li>
<li>技术设计文档</li>
<li>测试文档</li>
<li>在线帮助</li>
<li>产品发布注释</li>
<li>产品软件包</li>
</ol>
<h4 id="5-软件危机的原因"><a href="#5-软件危机的原因" class="headerlink" title="5. 软件危机的原因"></a>5. 软件危机的原因</h4><ol>
<li>客观因素<ul>
<li>需求分析不足</li>
<li>开发周期管理不善</li>
<li>开发过程不规范</li>
<li>质量控制标准规程滞后</li>
<li>软件维护计划被忽视</li>
</ul>
</li>
<li>产业因素<ul>
<li>软件产业的作坊式管理</li>
<li>软件企业规模的急剧膨胀</li>
</ul>
</li>
</ol>
<h4 id="6-软件危机的根源"><a href="#6-软件危机的根源" class="headerlink" title="6. 软件危机的根源"></a>6. 软件危机的根源</h4><ol>
<li>大量的需求与生产效率之间的矛盾</li>
<li>软件系统的复杂性与软件开发方法之间的矛盾</li>
</ol>
<h4 id="7-如何解决软件危机"><a href="#7-如何解决软件危机" class="headerlink" title="7. 如何解决软件危机"></a>7. 如何解决软件危机</h4><ol>
<li>采用工程项目管理办法实施软件开发和组织管理</li>
<li>采用成熟的软件开发技术和方法，使用适当的软件工具</li>
</ol>
<h3 id="二、软件开发与软件工程"><a href="#二、软件开发与软件工程" class="headerlink" title="二、软件开发与软件工程"></a>二、软件开发与软件工程</h3><h4 id="1-软件开发的基本过程"><a href="#1-软件开发的基本过程" class="headerlink" title="1. 软件开发的基本过程"></a>1. 软件开发的基本过程</h4><ol>
<li>软件计划</li>
<li>软件需求分析</li>
<li>概要设计</li>
<li>详细设计</li>
<li>编程实现</li>
<li>软件测试</li>
<li>运行维护</li>
</ol>
<h4 id="2-软件开发的方法"><a href="#2-软件开发的方法" class="headerlink" title="2. 软件开发的方法"></a>2. 软件开发的方法</h4><ol>
<li>研究什么？软件开发方法研究如何在规定的时间、资金范围内开发出符合用户需求的高质量的软件产品</li>
<li>是什么？软件开发方法是一种使用预先定义的<strong>技术集及符号</strong>来组织软件生产过程的方法</li>
<li>方法：<ul>
<li>面向数据结构的开发方法</li>
<li>面向对象的数据结构开发方法</li>
<li>面向数据流的开发方法</li>
<li>基于模型的方法</li>
</ul>
</li>
</ol>
<h4 id="3-软件工程要点"><a href="#3-软件工程要点" class="headerlink" title="3. 软件工程要点"></a>3. 软件工程要点</h4><ol>
<li>软件工程将系统的、规范的、可度量的方法应用于软件的开发、运行以及维护的过程</li>
<li>软件工程应采用适当的软件开发方法，语言，结构开发软件，使得软件产品标准化，开发人员专业化</li>
<li>采用<strong>工程学</strong>的观点进行费用计算，制定合理的进度</li>
<li>采用<strong>管理科学</strong>中的方法进行软件开发管理</li>
<li>采用<strong>数学</strong>的方法建立软件开发模型与算法研究</li>
</ol>
<h4 id="4-软件工程原则"><a href="#4-软件工程原则" class="headerlink" title="4. 软件工程原则"></a>4. 软件工程原则</h4><ol>
<li>采用合适的软件开发模型</li>
<li>采用合适的设计方法</li>
<li>提供高质量的工程支持</li>
<li>重视开发过程管理</li>
</ol>
<h4 id="5-软件工程目标"><a href="#5-软件工程目标" class="headerlink" title="5. 软件工程目标"></a>5. 软件工程目标</h4><ol>
<li>正确性</li>
<li>可用性</li>
<li>经济型</li>
</ol>
<h4 id="6-软件生命周期"><a href="#6-软件生命周期" class="headerlink" title="6. 软件生命周期"></a>6. 软件生命周期</h4><ol>
<li>可行性分析阶段</li>
<li>需求分析阶段</li>
<li>设计阶段</li>
<li>实现阶段</li>
<li>测试阶段</li>
<li>运行与维护阶段</li>
</ol>
<h4 id="7-软件生命周期常见模型"><a href="#7-软件生命周期常见模型" class="headerlink" title="7. 软件生命周期常见模型"></a>7. 软件生命周期常见模型</h4><ol>
<li><p>瀑布模型</p>
<p>将<a href="https://baike.baidu.com/item/%E8%BD%AF%E4%BB%B6%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F">软件生命周期</a>划分为制定计划、<a href="https://baike.baidu.com/item/%E9%9C%80%E6%B1%82%E5%88%86%E6%9E%90">需求分析</a>、<a href="https://baike.baidu.com/item/%E8%BD%AF%E4%BB%B6%E8%AE%BE%E8%AE%A1">软件设计</a>、程序编写、<a href="https://baike.baidu.com/item/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95">软件测试</a>和运行维护等六个基本活</p>
<p><img src="https://i.loli.net/2021/03/15/LioGF5x1qZBkb8N.png"></p>
<p><img src="https://i.loli.net/2021/03/15/xlg58trI7ybLZEw.png"></p>
<ul>
<li><p>优点：</p>
<ol>
<li>为项目提供了按阶段划分的检查点</li>
<li>可以在迭代模型中使用瀑布模型</li>
<li>当前一个阶段完成后，只需要关注后续阶段</li>
</ol>
</li>
<li><p>缺点</p>
<ol>
<li><p>各阶段都需要输出一些相应的文件，增加了工作量</p>
</li>
<li><p>用户只有等到开发末期才能看到成果，增加了开发的风险</p>
</li>
<li><p>最突出的缺点：<strong>不适应用户需求的变化</strong>，<strong>早期的错误 可能要等到开发后期的测试阶段才能发现</strong>，带来严重后果</p>
</li>
</ol>
</li>
<li><p>适用环境</p>
<p>​        比如A拥有一家跑车公司，可以给客户自定义生产跑车。有一天一土豪来到A的公司，跟A商谈了一个跑车项目，他们谈好了车型，材料，马力等等细节。之后，A带着团队做了6个月，做成了这架跑车，交给了土豪。可是土豪开了一天之后回来要求重做，原因是当讨论方案的时候，双方都忘记给跑车安尾灯了！但是给跑车安装尾灯，就要涉及到整个车尾的重新设计，就要把整辆车拆掉再重新组装！</p>
<p>​        这个模型显然只适合已经成熟了的项目，团队接手项目之后如庖丁解牛般行云流水。当团队接手了创新项目之后，显然已经不再适合用瀑布模型。</p>
</li>
</ul>
</li>
<li><p>V模型</p>
<p><img src="https://i.loli.net/2021/03/15/BCHoZSTIgFqc6hW.png"></p>
<ul>
<li><p>V模型大体可以划分为以下几个不同的阶段步骤：客户<strong>需求分析、软件需求分析、概要设计、详细设计、软件编码、单元测试、集成测试、系统测试、验收测试。</strong></p>
</li>
<li><p>V模型的缺点：V模型仅仅把<a href="https://baike.baidu.com/item/%E6%B5%8B%E8%AF%95%E8%BF%87%E7%A8%8B">测试过程</a>作为在<a href="https://baike.baidu.com/item/%E9%9C%80%E6%B1%82%E5%88%86%E6%9E%90">需求分析</a>、<a href="https://baike.baidu.com/item/%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1">系统设计</a>及编码之后的一个阶段，忽视了测试对需求分析,系统设计的验证，需求的满足情况一直到后期的<a href="https://baike.baidu.com/item/%E9%AA%8C%E6%94%B6%E6%B5%8B%E8%AF%95">验收测试</a>才被验证。</p>
</li>
</ul>
</li>
<li><p>W模型</p>
<ul>
<li><p>W模型：就是两个V模型 一个代表测试模型 一个代表开发模型</p>
<p><img src="https://i.loli.net/2021/03/15/1etDuNySjkcso4T.png"></p>
</li>
<li><p>W模型 强调</p>
<p>测试应该伴随整个生命周期，测试的对象不应该仅仅是程序，需求、<strong>设计等开发输出的文档也要进行测试</strong></p>
</li>
<li><p>优点：W模型有利于尽早地全面的发现问题。对需求的测试也有利于及时了解项目难度和测试风险，及早制定应对措施，这将显著减少<a href="https://baike.baidu.com/item/%E6%80%BB%E4%BD%93%E6%B5%8B%E8%AF%95/9005959">总体测试</a>时间，加快项目进度。</p>
</li>
<li><p>缺点：在W模型中，需求、设计、编码等活动被视为串行的，同时，测试和开发活动各自也保持着一种线性的前后关系，上一阶段完全结束，才可正式开始下一个阶段工作。这样就无法支持<a href="https://baike.baidu.com/item/%E8%BF%AD%E4%BB%A3/8415523">迭代</a>的开发模型</p>
</li>
</ul>
</li>
<li><p>快速应用开发模型</p>
<p>快速应用开发是一个增量型的软件开发过程模型，强调极短的开发周期</p>
<p><img src="https://i.loli.net/2021/03/15/QjoUklizEmKG4Rv.png" alt="image-20210312202010090"></p>
<ul>
<li>缺点：<ol>
<li>并非所有应用都适合采用RAD，如果一个应用不能被模块化，那么构造应用的构件就无法快速获取</li>
<li>由于时间约束，开发人员和客户必须在较短的时间内完成一系列的需求分析，沟通配合不当都会导致应用RAD模型的失败</li>
<li>RAD<strong>适合于管理信息系统的开发</strong>，对于其他类型的应用系统，如技术风险较高、与外围系统的互操作性较高等，不太合适 </li>
</ol>
</li>
</ul>
</li>
<li><p>原型模型</p>
<ul>
<li><p>概念：</p>
<p>​           原型模型是先借用已有系统作为原型模型，通过“样品”不断改进，使得最后的产品就是用户所需要的。主要是通过向用户提供原型获取用户的反馈，使开发出的软件能够真正反映用户的需求。</p>
<p>​           同时，原型模型采用逐步求精的方法完善原型，使得原型能够“快速”开发，避免了像瀑布模型一样在冗长的开发过程中难以对用户的反馈作出快速的响应。相对瀑布模型而言，原型模型更符合人们开发软件的习惯，是目前较流行的一种实用软件生存期模型</p>
</li>
<li><p>优点：</p>
<ol>
<li><p>开发人员与用户在原型上达成一致后，减少了风险的发生，减少用户的培训时间，提高用户满意度</p>
</li>
<li><p>缩短开发周期</p>
</li>
<li><p>降低成本</p>
</li>
</ol>
</li>
<li><p>缺点：</p>
<ol>
<li>大型系统难以进行直接的原型模拟</li>
<li>容易忽视一些文档工作，造成资源浪费、项目规划、管理困难</li>
</ol>
</li>
<li><p>适用场所：</p>
<p>适用于那些不能预先确切定义需求的软件系统的开发</p>
</li>
</ul>
</li>
</ol>
<h4 id="如何从一个需求落实到一个系统设计"><a href="#如何从一个需求落实到一个系统设计" class="headerlink" title="如何从一个需求落实到一个系统设计"></a>如何从一个需求落实到一个系统设计</h4><p><a href="http://www.woshipm.com/pmd/712972.html">参考</a></p>
<h4 id="如何衡量两个不同设计的好坏"><a href="#如何衡量两个不同设计的好坏" class="headerlink" title="如何衡量两个不同设计的好坏"></a>如何衡量两个不同设计的好坏</h4><ol>
<li><p>可伸缩性</p>
<p>当服务的负载增长时，系统能被扩展来满足需求，且不降低服务质量。简单的说，服务是可扩展的，并且扩展的成本是比较合理的。</p>
</li>
<li><p>高可用</p>
<p>尽管部分硬件和软件会发生故障，整个系统的服务必须是每天24小时每星期7天可用的。一般通过软件和硬件的冗余来实现。</p>
</li>
<li><p>可管理</p>
<p>整个系统可能在物理上很大，但应该容易管理。需要开发对应的管理工具。</p>
</li>
<li><p>价格有效</p>
<p>整个系统实现是经济的、易支付的。这点很多人可能会忽略，架构设计需要考虑ROI因素，如果一个架构很好，但成本高得惊人不一定是合适的架构。</p>
</li>
</ol>
<h4 id="如何在各种限制下（人员、时间、资源等）选择其中更合适的设计，以及提升该设计的可拓展性"><a href="#如何在各种限制下（人员、时间、资源等）选择其中更合适的设计，以及提升该设计的可拓展性" class="headerlink" title="如何在各种限制下（人员、时间、资源等）选择其中更合适的设计，以及提升该设计的可拓展性"></a>如何在各种限制下（人员、时间、资源等）选择其中更合适的设计，以及提升该设计的可拓展性</h4><p>参考</p>
<ol>
<li><a href="https://baike.baidu.com/item/%E7%80%91%E5%B8%83%E6%A8%A1%E5%9E%8B/9817778?fr=aladdin">百度百科—瀑布模型</a></li>
<li><a href="https://baike.baidu.com/item/V%E6%A8%A1%E5%9E%8B/4518408?fr=aladdin">百度百科—V模型</a></li>
<li><a href="https://baike.baidu.com/item/W%E6%A8%A1%E5%9E%8B">百度百科—W模型</a></li>
<li><a href="https://blog.csdn.net/qq_23381995/article/details/61622590">CSDN—原型模型</a></li>
</ol>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>面试</tag>
        <tag>软件工程</tag>
      </tags>
  </entry>
  <entry>
    <title>JAVA 学习笔记</title>
    <url>/2021/03/13/java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h2 id="JAVA-学习笔记"><a href="#JAVA-学习笔记" class="headerlink" title="JAVA|学习笔记"></a>JAVA|学习笔记</h2> <span id="more"></span>
<h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><h5 id="1-基本数据类型："><a href="#1-基本数据类型：" class="headerlink" title="1. 基本数据类型："></a>1. 基本数据类型：</h5><p>四类：整型，浮点型，字符型，布尔</p>
<p>八种：</p>
<table>
<thead>
<tr>
<th align="center">类型</th>
<th align="center">关键字</th>
<th align="center">包裹类型</th>
<th align="center">大小 (字节)</th>
<th align="center">取值范围</th>
</tr>
</thead>
<tbody><tr>
<td align="center">字节型</td>
<td align="center">byte</td>
<td align="center">Byte</td>
<td align="center">1</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">短整型</td>
<td align="center">short</td>
<td align="center">Short</td>
<td align="center">2</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">整型</td>
<td align="center">int</td>
<td align="center">Integer</td>
<td align="center">4</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">长整型</td>
<td align="center">long</td>
<td align="center">Long</td>
<td align="center">8</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">单精度浮点</td>
<td align="center">float</td>
<td align="center">Float</td>
<td align="center">4</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">双精度浮点</td>
<td align="center">double</td>
<td align="center">Double</td>
<td align="center">8</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">字符型</td>
<td align="center">char</td>
<td align="center">Character</td>
<td align="center">2</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">布尔型</td>
<td align="center">boolean</td>
<td align="center">Boolean</td>
<td align="center">1</td>
<td align="center"></td>
</tr>
</tbody></table>
<h5 id="2-引用数据类型"><a href="#2-引用数据类型" class="headerlink" title="2. 引用数据类型"></a>2. 引用数据类型</h5><p>类，数组，接口</p>
<h2 id="权限修饰符"><a href="#权限修饰符" class="headerlink" title="权限修饰符"></a>权限修饰符</h2><p>$\checkmark$ 表示是否可以访问类内被下述修饰符修饰($pubic — protected — default — private$)变量的值</p>
<table>
<thead>
<tr>
<th align="center"></th>
<th align="center">public</th>
<th align="center">protected</th>
<th align="center">default</th>
<th align="center">private</th>
</tr>
</thead>
<tbody><tr>
<td align="center">同一个类内</td>
<td align="center">$\checkmark$</td>
<td align="center">$\checkmark$</td>
<td align="center">$\checkmark$</td>
<td align="center">$\checkmark$</td>
</tr>
<tr>
<td align="center">同一个包内（子类 或 无关子类）</td>
<td align="center">$\checkmark$</td>
<td align="center">$\checkmark$</td>
<td align="center">$\checkmark$</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">不同包的子类</td>
<td align="center">$\checkmark$</td>
<td align="center">$\checkmark$</td>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td align="center">不同包的无关类</td>
<td align="center">$\checkmark$</td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
</tr>
</tbody></table>
<h2 id="类的权限修饰符"><a href="#类的权限修饰符" class="headerlink" title="类的权限修饰符"></a>类的权限修饰符</h2><p>   $\checkmark$ 表示是否可以使用</p>
<table>
<thead>
<tr>
<th align="center"></th>
<th align="center">$public$</th>
<th align="center">$protected$</th>
<th align="center">$default$</th>
<th align="center">$default$</th>
</tr>
</thead>
<tbody><tr>
<td align="center">外部类（普通）</td>
<td align="center">$\checkmark$</td>
<td align="center"></td>
<td align="center">$\checkmark$</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">成员内部类</td>
<td align="center">$\checkmark$</td>
<td align="center">$\checkmark$</td>
<td align="center">$\checkmark$</td>
<td align="center">$\checkmark$</td>
</tr>
<tr>
<td align="center">局部内部类（无，都不能用）</td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
</tr>
</tbody></table>
<h2 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h2><p>将一个类A定义在另一个类B里面，里面的那个类A就称为内部类，B则称为外部类</p>
<h5 id="1-成员内部类"><a href="#1-成员内部类" class="headerlink" title="1. 成员内部类"></a>1. 成员内部类</h5><ul>
<li><p>定义在B类成员方法外部的类</p>
</li>
<li><p>调用方式</p>
<ul>
<li><p>直接调用方式</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">外部类名.内部类名 对象名 = <span class="keyword">new</span> 外部类型().new 内部类型();</span><br><span class="line">Outter.Inner inner=<span class="keyword">new</span> Outter().n<span class="function">ew <span class="title">Inner</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure></li>
<li><p>间接调用方式</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Outter</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name = <span class="string">&quot;Outter&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//成员内部类</span></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Inner</span></span></span><br><span class="line"><span class="class">    </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> String name = <span class="string">&quot;Inner&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show_name</span><span class="params">()</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="comment">//重名解决办法</span></span><br><span class="line">            System.out.println(<span class="keyword">this</span>.name);</span><br><span class="line">            System.out.println(Outter.<span class="keyword">this</span>.name);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//外 访问 内 间接访问方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">useinner</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Inner inner = <span class="keyword">new</span> Inner();</span><br><span class="line">        inner.show_name();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//局部内部类</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">local_InnerClass_method</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="class"><span class="keyword">class</span> <span class="title">Inner</span></span></span><br><span class="line"><span class="class">        </span>&#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">local_InnerClass_show</span><span class="params">()</span></span></span><br><span class="line"><span class="function">            </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;局部内部类方法&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        Inner inner = <span class="keyword">new</span> Inner();</span><br><span class="line">        inner.local_InnerClass_show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">use</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Outter outter = <span class="keyword">new</span> Outter();</span><br><span class="line">        <span class="comment">//1.成员内部类的间接调用</span></span><br><span class="line">        outter.useinner();</span><br><span class="line">        <span class="comment">//2.成员内部类的直接调用</span></span><br><span class="line">        Outter.Inner inner = <span class="keyword">new</span> Outter().n<span class="function">ew <span class="title">Inner</span><span class="params">()</span></span>;</span><br><span class="line">        inner.show_name();</span><br><span class="line">        <span class="comment">//3.局部内部类的方法的调用</span></span><br><span class="line">        outter.local_InnerClass_method();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<h5 id="2-局部内部类"><a href="#2-局部内部类" class="headerlink" title="2. 局部内部类"></a>2. 局部内部类</h5><ul>
<li><p>定义在B类成员方法内部的类</p>
</li>
<li><p>调用方式</p>
<ul>
<li>调用方式（见上述代码）</li>
</ul>
</li>
<li><p><strong>注意事项</strong></p>
<p>局部内部类若是想要使用所在成员方法中的局部变量，这个局部变量必须要被 $final$ 修饰，并且有初始值</p>
<p>原因：</p>
<ol>
<li>成员方法与局部变量是存放在栈内存当中，局部变量随着方法的弹出而消失</li>
<li>但局部内部类是存放在堆内存当中的，是一直存在的 直到垃圾回收</li>
<li>所以说 局部内部类的生存周期 要比局部变量长，但你还继续使用，这个内部类就会拷贝一份局部变量的初始值，这样</li>
</ol>
</li>
<li><p>访问特点</p>
<ol>
<li>内 - 访问 - 外，直接访问（参考上面的代码）</li>
<li>外 - 访问 - 内， 需要实例化一个内部类的对象（参考上面的代码）</li>
</ol>
</li>
</ul>
<h5 id="3-匿名内部类（也是局部内部类）"><a href="#3-匿名内部类（也是局部内部类）" class="headerlink" title="3. 匿名内部类（也是局部内部类）"></a>3. 匿名内部类（也是局部内部类）</h5><ul>
<li><p>注意 匿名内部类 匿名的是 类名 不是对象名</p>
</li>
<li><p>而 匿名对象 匿名的是 对象名,例如： new Student().study();<br>1</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//定义一个接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Myinterface</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">run2</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//定义一个实现类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Myinterfaceimp</span> <span class="keyword">implements</span> <span class="title">Myinterface</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;实现类，重写接口的抽象方法1&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run2</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;实现类，重写接口的抽象方法2&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//定义一个主函数</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">//通过实现类 来重写接口中所有的抽象方法</span></span><br><span class="line">        Myinterfaceimp myinterfaceimp = <span class="keyword">new</span> Myinterfaceimp();</span><br><span class="line">        myinterfaceimp.run();</span><br><span class="line">        myinterfaceimp.run2();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//通过匿名内部类 来实现接口中抽象方法</span></span><br><span class="line">        <span class="comment">//匿名内部类 匿名的是 类的名称 并没有匿名对象名称 下边这个 对象名是myinterface</span></span><br><span class="line">        Myinterface myinterface = <span class="keyword">new</span> Myinterface()</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span></span><br><span class="line"><span class="function">            </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;匿名内部类 重写接口的抽象方法1&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run2</span><span class="params">()</span></span></span><br><span class="line"><span class="function">            </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;匿名内部类 重写接口的抽象方法2&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        myinterface.run();</span><br><span class="line">        myinterface.run2();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//匿名对象内部类 对象名也省了，只能执行接口中所有抽象方法中的一个</span></span><br><span class="line">        <span class="keyword">new</span> Myinterface()&#123;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span></span><br><span class="line"><span class="function">            </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;匿名对象内部类 重写接口的抽象方法1&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run2</span><span class="params">()</span></span></span><br><span class="line"><span class="function">            </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;匿名对象内部类 重写接口的抽象方法1&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;.run();<span class="comment">//只能执行一个抽象方法</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h2><h5 id="1-private"><a href="#1-private" class="headerlink" title="1. private"></a>1. private</h5><ol>
<li>private是一个权限修饰符，代表最小权限。</li>
<li>可以修饰成员变量和成员方法。</li>
<li>被private修饰后的成员变量和成员方法，<strong>只在本类中才能访问</strong>。</li>
<li>对需要访问的成员变量，提供对应的一对 getXxx 方法 、setXxx 方法。</li>
<li>this 的使用 this.成员变量名。</li>
</ol>
<h5 id="2-public"><a href="#2-public" class="headerlink" title="2. public"></a>2. public</h5><h5 id="3-构造方法"><a href="#3-构造方法" class="headerlink" title="3. 构造方法"></a>3. 构造方法</h5><ul>
<li>如果你不提供构造方法，系统会给出无参数构造方法。</li>
<li><strong>如果你提供了构造方法，系统将不再提供无参数构造方法。</strong></li>
<li>构造方法是可以重载的，既可以定义参数，也可以不定义参数。</li>
</ul>
   <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">	<span class="keyword">private</span> String name;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="comment">// 无参数构造方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">    <span class="comment">// 有参数构造方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name,<span class="keyword">int</span> age)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="keyword">this</span>.age = age;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="4-标准代码——JavaBean"><a href="#4-标准代码——JavaBean" class="headerlink" title="4. 标准代码——JavaBean"></a>4. 标准代码——JavaBean</h5><ol>
<li>getter</li>
<li>setter</li>
</ol>
<h5 id="5-自定义类-作为-成员变量"><a href="#5-自定义类-作为-成员变量" class="headerlink" title="5. 自定义类 作为 成员变量"></a>5. 自定义类 作为 成员变量</h5><h5 id="6-自定义接口-作为-成员变量"><a href="#6-自定义接口-作为-成员变量" class="headerlink" title="6. 自定义接口 作为 成员变量"></a>6. 自定义接口 作为 成员变量</h5><h5 id="7-自定义接口-作为成员方法的参数、返回类型"><a href="#7-自定义接口-作为成员方法的参数、返回类型" class="headerlink" title="7. 自定义接口 作为成员方法的参数、返回类型"></a>7. 自定义接口 作为成员方法的参数、返回类型</h5><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><ol>
<li><h5 id="定义："><a href="#定义：" class="headerlink" title="定义："></a>定义：</h5><p>​    继承：就是子类继承父类的属性和行为，使得子类对象具有与父类相同的属性、相同的行为。子类可以直接访问父类中的<strong>非私有</strong>的属性和行为。</p>
</li>
<li><h5 id="优点："><a href="#优点：" class="headerlink" title="优点："></a>优点：</h5><p>​    代码复用，多态的前提</p>
</li>
<li><h5 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> 父类 </span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> 子类 <span class="keyword">extends</span> 父类 </span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><h5 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h5><ol>
<li>成员变量<ul>
<li>重名：通过 $ this.super$  来区分</li>
<li>不重名：可以直接访问父类的非私有变量</li>
</ul>
</li>
<li>成员函数<ul>
<li>重名：子类重写了父类的函数，执行子类的方法</li>
<li>不重名：先看子类有没有这个方法，再去父类查找</li>
</ul>
</li>
<li>构造函数<ul>
<li>构造方法的名字与类名一致，所以子类是无法继承父类构造方法的。</li>
<li>子类在初始化时，<strong>会先执行父类的构造方法</strong>，这是因为在子类的构造方法中有一个$super()$ 会执行父类的构造方法</li>
</ul>
</li>
</ol>
</li>
</ol>
<h2 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h2><ol>
<li><h5 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h5><p>多态： 是指同一行为，具有多个不同表现形式。</p>
</li>
<li><h5 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h5><p>多态的好处，体现在，可以使程序编写的更简单，并有良好的扩展。</p>
<p>例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 多态形式，创建对象</span></span><br><span class="line">    Cat c = <span class="keyword">new</span> Cat();</span><br><span class="line">    Dog d = <span class="keyword">new</span> Dog();</span><br><span class="line">    <span class="comment">// 调用showCatEat</span></span><br><span class="line">    showCatEat(c);</span><br><span class="line">    <span class="comment">// 调用showDogEat</span></span><br><span class="line">        showDogEat(d);</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    以上两个方法, 均可以被showAnimalEat(Animal a)方法所替代</span></span><br><span class="line"><span class="comment">    而执行效果一致</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    showAnimalEat(c);</span><br><span class="line">    showAnimalEat(d);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">showCatEat</span> <span class="params">(Cat c)</span></span>&#123;</span><br><span class="line">    	c.eat();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">showDogEat</span> <span class="params">(Dog d)</span></span>&#123;</span><br><span class="line">    	d.eat();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">showAnimalEat</span> <span class="params">(Animal a)</span></span>&#123;</span><br><span class="line">    	a.eat();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>​        上述代码注意 最后三个函数的 形参 如果没有多态，需要写两个函数  一个形参是Cat类型,一个形参是 Dog类型，这俩都是Animal的子类 ，而最后一个就直接用Animal就省了好多代码</p>
</li>
<li><h5 id="格式-1"><a href="#格式-1" class="headerlink" title="格式"></a>格式</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">父类类型 变量名 = <span class="keyword">new</span> 子类对象；</span><br><span class="line">变量名.方法名();</span><br></pre></td></tr></table></figure></li>
<li><h5 id="特点-1"><a href="#特点-1" class="headerlink" title="特点"></a>特点</h5><ol>
<li>当使用多态方式调用方法时，首先检查父类中是否有该方法，<strong>如果没有，则编译错误</strong>；有的话，执行子类的重写方法</li>
</ol>
</li>
<li><h5 id="引用类型转换"><a href="#引用类型转换" class="headerlink" title="引用类型转换"></a>引用类型转换</h5><p>为什么要转型？多态带来的麻烦</p>
<p>当使用多态方式调用方法时，首先检查父类中是否有该方法，如果没有，则编译错误。也就是说，不能调用子类拥有，而父类没有的方法。</p>
<ol>
<li>向上类型转换（默认）</li>
<li>向下类型转换（可能会出错）</li>
</ol>
</li>
</ol>
<h2 id="API"><a href="#API" class="headerlink" title="API"></a>API</h2><ol>
<li><h5 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>];</span><br><span class="line">arr.length</span><br></pre></td></tr></table></figure></li>
<li><h5 id="ArrayList-lt-gt"><a href="#ArrayList-lt-gt" class="headerlink" title="ArrayList&lt;&gt;"></a>ArrayList&lt;&gt;</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ArrayList&lt;String&gt; arr = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">arr.size()</span><br></pre></td></tr></table></figure></li>
<li><h5 id="String"><a href="#String" class="headerlink" title="String"></a>String</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String s=<span class="string">&quot;123&quot;</span>;</span><br><span class="line">System.out.println(s.length());</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
        <tag>JAVA</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2021/03/13/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<span id="more"></span>

<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
</search>
